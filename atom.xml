<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alterem</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.alterem.top/"/>
  <updated>2019-10-13T16:06:06.446Z</updated>
  <id>http://blog.alterem.top/</id>
  
  <author>
    <name>Alterem</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python自动更换壁纸爬虫与tkinter结合</title>
    <link href="http://blog.alterem.top/2019/10/14/Python%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2%E5%A3%81%E7%BA%B8%E7%88%AC%E8%99%AB%E4%B8%8Etkinter%E7%BB%93%E5%90%88/"/>
    <id>http://blog.alterem.top/2019/10/14/Python自动更换壁纸爬虫与tkinter结合/</id>
    <published>2019-10-13T16:04:00.000Z</published>
    <updated>2019-10-13T16:06:06.446Z</updated>
    
    <content type="html"><![CDATA[<p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> Tk, Label, Button,Entry,StringVar,messagebox</span><br><span class="line"><span class="comment"># '放到AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup下把本文件后缀设为pyw 就会开机自启'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bz</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.curent_url = <span class="string">'https://tenapi.cn/img/acg.php'</span></span><br><span class="line">        self.root = Tk()</span><br><span class="line">        self.root.attributes(<span class="string">"-alpha"</span>, <span class="number">0.8</span>)</span><br><span class="line">        self.root.title(<span class="string">'壁纸切---by Alterem---&gt;吾爱17788210295'</span>)</span><br><span class="line">        self.root.geometry(<span class="string">'218x55+1300+20'</span>)</span><br><span class="line">        self.b1 = Button(self.root, text=<span class="string">' 换一类 '</span>, command=self.change_type, fg=<span class="string">'#00f235'</span>,width=<span class="number">8</span>).place(x=<span class="number">0</span>, y=<span class="number">0</span>)</span><br><span class="line">        self.b2 = Button(self.root, text=<span class="string">'下一张&gt;&gt;  频率(分)'</span>, command=self.change_next, fg=<span class="string">'blue'</span>,width=<span class="number">22</span>).place(x=<span class="number">63</span>, y=<span class="number">0</span>)</span><br><span class="line">        self.b3 = Button(self.root, text=<span class="string">'停止切换'</span>, command=self.stop, fg=<span class="string">'red'</span>, width=<span class="number">8</span>).place(x=<span class="number">0</span>, y=<span class="number">30</span>)</span><br><span class="line">        self.label = Label(self.root, text=<span class="string">'二次元'</span>,fg=<span class="string">'#9e3dff'</span>)</span><br><span class="line">        self.label.place(x=<span class="number">85</span>, y=<span class="number">30</span>)</span><br><span class="line">        e = StringVar()</span><br><span class="line">        self.input=Entry(self.root,textvariable=e,fg=<span class="string">'#ffaf0a'</span>)</span><br><span class="line">        e.set(<span class="number">0.1</span>)       <span class="comment">#默认0.1分钟   6s</span></span><br><span class="line">        self.input.place(x=<span class="number">153</span>, y=<span class="number">30</span>)</span><br><span class="line">        self.url_list = &#123;<span class="number">1</span>: [<span class="string">'影视'</span>, <span class="string">'http://pic.tsmp4.net/api/yingshi/img.php'</span>],</span><br><span class="line">                         <span class="number">2</span>: [<span class="string">'随机'</span>, <span class="string">'http://lorempixel.com/1920/1080/'</span>],</span><br><span class="line">                         <span class="number">3</span>: [<span class="string">'女神'</span>, <span class="string">'http://pic.tsmp4.net/api/nvsheng/img.php'</span>],</span><br><span class="line">                         <span class="number">4</span>: [<span class="string">'风景'</span>, <span class="string">'http://pic.tsmp4.net/api/fengjing/img.php'</span>],</span><br><span class="line">                         <span class="number">5</span>: [<span class="string">'二次元'</span>, <span class="string">'https://tenapi.cn/img/acg.php'</span>]&#125;</span><br><span class="line">        self.path = <span class="string">'D:\壁纸'</span></span><br><span class="line">        self.filepath = self.path + <span class="string">'/img.jpg'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.path):</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line">        self.flag = <span class="keyword">True</span></span><br><span class="line">        self.start = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.flag = <span class="keyword">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.start &gt; <span class="number">5</span>:</span><br><span class="line">            self.start = <span class="number">1</span></span><br><span class="line">        list = self.url_list.get(self.start)</span><br><span class="line">        curent_type = list[<span class="number">0</span>]</span><br><span class="line">        self.curent_url = list[<span class="number">1</span>]</span><br><span class="line">        self.label[<span class="string">'text'</span>] = curent_type</span><br><span class="line">        self.start += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_next</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = requests.get(url=self.curent_url).content</span><br><span class="line">        <span class="keyword">with</span> open(self.filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line">        self.config()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.num = eval(self.input.get()) * <span class="number">60</span>  <span class="comment">#捕获结束界面后的异常</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = requests.get(url=self.curent_url).content</span><br><span class="line">            <span class="keyword">with</span> open(self.filepath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">            time.sleep(self.num)       <span class="comment"># 睡眠单位秒</span></span><br><span class="line">            self.config()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config</span><span class="params">(self)</span>:</span></span><br><span class="line">        ctypes.windll.user32.SystemParametersInfoW(<span class="number">20</span>, <span class="number">0</span>, self.filepath, <span class="number">0</span>)  <span class="comment"># 设置桌面壁纸.</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">img</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.flag:</span><br><span class="line">            self.get_img()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        t1 = Thread(target=self.img)</span><br><span class="line">        <span class="comment"># t1.setDaemon(True)           #设置守护线程 ---&gt;是否完全关闭</span></span><br><span class="line">        t1.start()</span><br><span class="line">        self.root.mainloop()</span><br><span class="line">        <span class="keyword">if</span> self.flag:</span><br><span class="line">            root = Tk()</span><br><span class="line">            root.withdraw()</span><br><span class="line">            messagebox.showinfo(<span class="string">"by Alterem"</span>, <span class="string">"只关闭了界面! 图片还在切换! 请进入任务管理器结束进程"</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    b = Bz()</span><br><span class="line">    b.run()</span><br></pre></td></tr></table></figure><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接上代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.alterem.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://blog.alterem.top/tags/Python/"/>
    
      <category term="Tkinter" scheme="http://blog.alterem.top/tags/Tkinter/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的5种时间类型的比较</title>
    <link href="http://blog.alterem.top/2019/10/13/MySQL%E7%9A%845%E7%A7%8D%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://blog.alterem.top/2019/10/13/MySQL的5种时间类型的比较/</id>
    <published>2019-10-13T15:45:22.000Z</published>
    <updated>2019-10-13T15:50:58.177Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>日期时间类型</th><th>占用空间</th><th>日期格式</th><th>最小值</th><th>最大值</th><th>零值表示</th></tr></thead><tbody><tr><td>DATETIME</td><td>8 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>19700101080001</td><td>2038 年的某个时刻</td><td>00000000000000</td></tr><tr><td>DATE</td><td>4 bytes</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-31</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3 bytes</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td><td>00:00:00</td></tr><tr><td>YEAR</td><td>1 bytes</td><td>YYYY</td><td>1901</td><td>2155</td><td>0000</td></tr></tbody></table><p><strong>DATETIME</strong></p><pre><code>DATETIME 用于表示 年月日 时分秒，是 DATE 和 TIME 的组合，并且记录的年份（见上表）比较长久。如果实际应用中有这样的需求，就可以使用 DATETIME 类型。</code></pre><p>1、DATETIME列可以设置为多个，默认可为null，可以手动设置其值。  </p><p>2、DATETIME列不可设定默认值。 </p><p>3、DATETIME列可以变相的设定默认值，比如通过触发器、或者在插入数据时候，将DATETIME字段值设置为now()，这样可以做到了，尤其是后者，在程序开发中常常用到。</p><p> <strong>TIMESTAMP</strong></p><ul><li>TIMESTAMP 用于表示 年月日 时分秒，但是记录的年份（见上表）比较短暂，TIMESTAMP列必须有默认值，默认值可以为“0000-00-00 00:00:00”，但不能为null。</li><li>TIMESTAMP 和时区相关，更能反映当前时间。当插入日期时，会先转换为本地时区后再存放；当查询日期时，会将日期转换为本地时区后再显示。所以不同时区的人看到的同一时间是  不一样的。</li><li>表中的第一个 TIMESTAMP 列自动设置为系统时间（CURRENT_TIMESTAMP）。当插入或更新一行，但没有明确给 TIMESTAMP 列赋值，也会自动设置为当前系统时间。如果表中有第二个 TIMESTAMP 列，则默认值设置为0000-00-00 00:00:00。</li><li><p>TIMESTAMP 的属性受 Mysql 版本和服务器 SQLMode 的影响较大。</p><p>   如果记录的日期需要让不同时区的人使用，最好使用 TIMESTAMP。</p></li></ul><p>注：一般建表时候，创建时间用datetime，更新时间用timestamp。</p><p> <strong>DATE</strong></p><pre><code>DATE 用于表示 年月日，如果实际应用值需要保存 年月日 就可以使用 DATE。</code></pre><p> <strong>TIME</strong></p><pre><code>TIME 用于表示 时分秒，如果实际应用值需要保存 时分秒 就可以使用 TIME。</code></pre><p> <strong>YEAR</strong></p><pre><code>YEAR 用于表示 年份，YEAR 有 2 位（最好使用4位）和 4 位格式的年。 默认是4位。如果实际应用只保存年份，那么用 1 bytes 保存 YEAR 类型完全可以。不但能够节约存储空间，还能提高表的操作效率。</code></pre><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日期时间类型&lt;/th&gt;
&lt;th&gt;占用空间&lt;/th&gt;
&lt;th&gt;日期格式&lt;/th&gt;
&lt;th&gt;最小值&lt;/th&gt;
&lt;th&gt;最大值&lt;/th&gt;
&lt;th&gt;零值表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DAT
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://blog.alterem.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.alterem.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySql在CentOS上执行自动备份</title>
    <link href="http://blog.alterem.top/2019/10/13/MySQL%E5%9C%A8CentOS%E4%B8%8A%E6%89%A7%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <id>http://blog.alterem.top/2019/10/13/MySQL在CentOS上执行自动备份/</id>
    <published>2019-10-13T15:19:07.000Z</published>
    <updated>2019-10-13T15:44:32.533Z</updated>
    
    <content type="html"><![CDATA[<p>​    开发中我们常常有使用Svn或者Git来管理我们的代码或者是项目相关的文件，然而他们都有一个共同点就是：<strong>版本控制</strong></p><p>​    很多人会问为什么要使用Svn或者是Git，那么我会问：我相信你写的代码很好，但是有一天你修改了很多很多的Bug，但是突然想到以前的代码中有一个比较重要的算法你不小心覆盖掉了，这时候你应该怎么办？</p><p>​    或许你会告诉我你可以在修改这些代码之前备份一次当前修改的文件，或者是当前项目。</p><p>​    但是时间久了你的机器上会有多少备份文件呢？</p><p>​    如果有一天你的同事需要回滚到之前的代码看一下那时候Bug的原因，你会从你的机器上找到指定时间的文件发给他嘛？</p><p>​    当然不是，我们有Svn或者是Git之后我们可以方便的看到文件之前的版本，还可以方便的对比。那么现在清楚了版本控制的重要性了。</p><p>​    同样数据库也是这样，我们的系统99%都离不开数据库，因为我们总要把数据存储起来。</p><p>​    那如果我们数据库被误删、被黑客入侵、被恶意修改怎么办？</p><p>​    那么我们可以试着让我们的服务器自动来帮我们备份数据库的数据到指定位置，万一有一天我们的数据库不小心手抖了，我们还可以用备份下来的数据库脚本直接恢复。</p><p>​    上脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># db username</span></span><br><span class="line">db_user=<span class="string">"test"</span>  </span><br><span class="line"><span class="comment"># db password</span></span><br><span class="line">db_passwd=<span class="string">"test"</span></span><br><span class="line"><span class="comment"># db host</span></span><br><span class="line">db_host=<span class="string">"121.201.5.216"</span></span><br><span class="line"><span class="comment"># backup db name</span></span><br><span class="line">db_name=<span class="string">"Alterem"</span>  </span><br><span class="line"><span class="comment"># the directory for story your backup file.  </span></span><br><span class="line">backup_dir=<span class="string">"backup"</span>  <span class="built_in">cd</span> </span><br><span class="line"><span class="comment"># date format for backup file (dd-mm-yyyy)  </span></span><br><span class="line">time=<span class="string">"<span class="variable">$(date +"%Y-%m-%d-%H-%M-%S")</span>"</span>  </span><br><span class="line"><span class="comment"># mysql, mysqldump and some other bin's path  </span></span><br><span class="line">MYSQL=<span class="string">"/usr/local/mysql/bin/mysql"</span>  </span><br><span class="line">MYSQLDUMP=<span class="string">"/usr/local/mysql/bin/mysqldump"</span>  </span><br><span class="line">GZIP=<span class="string">"/bin/gzip"</span>  </span><br><span class="line">  </span><br><span class="line"><span class="variable">$MYSQLDUMP</span> -u <span class="variable">$db_user</span> -h <span class="variable">$db_host</span> -p<span class="variable">$db_passwd</span> <span class="variable">$db_name</span> | <span class="variable">$GZIP</span> -9 &gt; <span class="string">"/data/backup/<span class="variable">$backup_dir</span>/<span class="variable">$db_name</span>"</span>_<span class="string">"<span class="variable">$time</span>.gz"</span></span><br></pre></td></tr></table></figure><h3 id="创建定时器"><a href="#创建定时器" class="headerlink" title="创建定时器"></a>创建定时器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加定时器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天凌晨 1 点 30 分 进行数据备份</span></span><br><span class="line">30  1  *  *  * /root/mysql-backup.sh</span><br></pre></td></tr></table></figure><p>重启定时器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/crond restart</span><br></pre></td></tr></table></figure><h3 id="cron解析"><a href="#cron解析" class="headerlink" title="cron解析"></a>cron解析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br></pre></td></tr></table></figure><p><a href="http://cron.qqe2.com/" target="_blank" rel="noopener">在线Cron表达式生成器</a>：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a></p><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    开发中我们常常有使用Svn或者Git来管理我们的代码或者是项目相关的文件，然而他们都有一个共同点就是：&lt;strong&gt;版本控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    很多人会问为什么要使用Svn或者是Git，那么我会问：我相信你写的代码很好，但是有一天你修改了
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://blog.alterem.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://blog.alterem.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>python拆分excel</title>
    <link href="http://blog.alterem.top/2019/10/11/python%E6%8B%86%E5%88%86excel/"/>
    <id>http://blog.alterem.top/2019/10/11/python拆分excel/</id>
    <published>2019-10-11T03:40:49.000Z</published>
    <updated>2019-10-11T03:45:30.027Z</updated>
    
    <content type="html"><![CDATA[<p>根据某一列，拆分成几个不同的EXCEL文件<br>操作方法：将EXCEL文件拖至EXE文件上，根据提示操作。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7u1krpyrkg311j0jj18k.gif" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">from</span> openpyxl.utils <span class="keyword">import</span> get_column_letter</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> sys, os, collections</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> copy</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">splitExcel</span><span class="params">(object)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sourceFile, titleLine=None, splitColumn=None)</span>:</span></span><br><span class="line">        self.sourceFile = sourceFile</span><br><span class="line">        self.sourceWorkbook = openpyxl.load_workbook(sourceFile)</span><br><span class="line">        self.targetWorkbook = openpyxl.Workbook()</span><br><span class="line">        self.targetWorkbook.remove(self.targetWorkbook.active)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 源工作表（object对象）</span></span><br><span class="line">        self.sourceWorksheet = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 最大行数</span></span><br><span class="line">        self.sourceWorkbookMaxRow = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 最大列数</span></span><br><span class="line">        self.sourceWorkbookMaxColumn = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 源工作表索引号</span></span><br><span class="line">        self.sourceWorksheetIndex = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 标题所在行号，用户输入时索引从1开始，内部处理时请留意索引数</span></span><br><span class="line">        <span class="comment"># if titleLine == None:</span></span><br><span class="line">        <span class="comment">#     titleLine = int(input('请输入标题所在行[2]: ').strip())</span></span><br><span class="line">        self.titleLine = titleLine</span><br><span class="line">        <span class="comment"># 根据哪个列进行拆分，用户输入时索引从1开始，内部处理时请留意索引数</span></span><br><span class="line">        self.splitColumn = splitColumn</span><br><span class="line">        <span class="comment"># 源工作薄当前行号</span></span><br><span class="line">        self.sbCurrectLine = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 目标工作薄各表当前数据行号</span></span><br><span class="line">        self.tbCurrectLines = &#123;&#125;</span><br><span class="line">        <span class="comment"># 表头文字</span></span><br><span class="line">        self.header = []</span><br><span class="line">        <span class="comment"># 各表数据</span></span><br><span class="line">        self.data = collections.OrderedDict()</span><br><span class="line">        <span class="comment"># 保存列宽</span></span><br><span class="line">        self.columnsWidth = collections.OrderedDict()</span><br><span class="line">        <span class="comment"># 格式</span></span><br><span class="line">        self.formats = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readData</span><span class="params">(self)</span>:</span></span><br><span class="line">        wb = xlrd.open_workbook(self.sourceFile)</span><br><span class="line">        ws = wb.sheet_by_index(self.sourceWorksheetIndex)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(ws.nrows):</span><br><span class="line">            <span class="keyword">if</span> x &lt; self.titleLine:</span><br><span class="line">                <span class="comment"># 表头</span></span><br><span class="line">                self.header.append(ws.row_values(x))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                v = ws.cell(x, self.splitColumn - <span class="number">1</span>).value</span><br><span class="line">                sheetName = self.clearSheetName(v)</span><br><span class="line">                <span class="comment"># 将表名加入data字典</span></span><br><span class="line">                <span class="keyword">if</span> sheetName <span class="keyword">not</span> <span class="keyword">in</span> self.data.keys():</span><br><span class="line">                    self.data[sheetName] = []</span><br><span class="line">                <span class="comment"># 添加数据</span></span><br><span class="line">                self.data[sheetName].append(ws.row_values(x))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectSplitSheet</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.sourceWorkbook.sheetnames) == <span class="number">1</span>:</span><br><span class="line">            self.sourceWorksheet = self.sourceWorkbook.active</span><br><span class="line">            self.sourceWorksheetIndex = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _n_ = <span class="number">0</span></span><br><span class="line">            print(<span class="string">'在工作薄中找到以下工作表：'</span>)</span><br><span class="line">            <span class="keyword">for</span> SheetName <span class="keyword">in</span> self.sourceWorkbook.sheetnames:</span><br><span class="line">                print(_n_, SheetName)</span><br><span class="line">                _n_ += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">            n = <span class="number">0</span></span><br><span class="line">            _input = input(<span class="string">'请输入要拆分表的序号[0]: '</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> _input != <span class="string">''</span>:</span><br><span class="line">                n = int(_input)</span><br><span class="line">            self.sourceWorksheet = self.sourceWorkbook.worksheets[n]</span><br><span class="line">            self.sourceWorksheetIndex = n</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectSplitColumn</span><span class="params">(self)</span>:</span></span><br><span class="line">        wb = xlrd.open_workbook(self.sourceFile)</span><br><span class="line">        ws = wb.sheet_by_index(self.sourceWorksheetIndex)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 保存一下最大行数、列数，以供其它（属性）地方使用</span></span><br><span class="line">        self.sourceWorkbookMaxRow = ws.nrows</span><br><span class="line">        self.sourceWorkbookMaxColumn = ws.ncols</span><br><span class="line"> </span><br><span class="line">        print(<span class="string">'\n在工作表的标题行（第 %s 行）找到以下列: '</span> % self.titleLine)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, ws.ncols + <span class="number">1</span>):</span><br><span class="line">            print(y, ws.cell(self.titleLine - <span class="number">1</span>, y - <span class="number">1</span>).value)</span><br><span class="line"> </span><br><span class="line">        columnNum = input(<span class="string">'请输入拆分列号[2]: '</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> columnNum == <span class="string">''</span>:</span><br><span class="line">            columnNum = <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            columnNum = int(columnNum)</span><br><span class="line">        self.splitColumn = columnNum</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readCellsStyle</span><span class="params">(self)</span>:</span></span><br><span class="line">        ws = self.sourceWorksheet</span><br><span class="line">        maxColumn = self.sourceWorkbookMaxColumn</span><br><span class="line">        styles = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        fonts = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        borders = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        fills = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        alignments = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        number_formats = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        protections = [[<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(self.titleLine + <span class="number">11</span>)]</span><br><span class="line">        heights = [<span class="keyword">None</span>] * (self.titleLine + <span class="number">11</span>)</span><br><span class="line">        widths = [<span class="keyword">None</span>] * (maxColumn + <span class="number">11</span>)</span><br><span class="line">        <span class="comment"># isDates = [None] * (maxColumn + 11)</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, self.titleLine + <span class="number">2</span>):</span><br><span class="line">            heights[x] = ws.row_dimensions[x].height</span><br><span class="line">            <span class="comment"># print(x,'height',heights[x])</span></span><br><span class="line">            <span class="comment"># for y in range(1, ws.max_column + 1):</span></span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, maxColumn + <span class="number">1</span>):</span><br><span class="line">                styles[x][y] = copy(ws.cell(x, y).style.replace(<span class="string">'常规'</span>, <span class="string">'Normal'</span>))</span><br><span class="line">                fonts[x][y] = copy(ws.cell(x, y).font)</span><br><span class="line">                borders[x][y] = copy(ws.cell(x, y).border)</span><br><span class="line">                fills[x][y] = copy(ws.cell(x, y).fill)</span><br><span class="line">                alignments[x][y] = copy(ws.cell(x, y).alignment)</span><br><span class="line">                number_formats[x][y] = copy(ws.cell(x, y).number_format)</span><br><span class="line">                protections[x][y] = copy(ws.cell(x, y).protection)</span><br><span class="line">                <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> widths:</span><br><span class="line">                    widths[y] = ws.column_dimensions[get_column_letter(y)].width</span><br><span class="line">                <span class="comment"># print(y, get_column_letter(y), ws.column_dimensions[get_column_letter(y)].width)</span></span><br><span class="line">                <span class="comment"># if y not in isDates:</span></span><br><span class="line">                <span class="comment">#     isDates[y] = ws.cell(x, y).is_date</span></span><br><span class="line"> </span><br><span class="line">        self.formats[<span class="string">'heights'</span>] = heights</span><br><span class="line">        self.formats[<span class="string">'styles'</span>] = styles</span><br><span class="line">        self.formats[<span class="string">'fonts'</span>] = fonts</span><br><span class="line">        self.formats[<span class="string">'borders'</span>] = borders</span><br><span class="line">        self.formats[<span class="string">'fills'</span>] = fills</span><br><span class="line">        self.formats[<span class="string">'alignments'</span>] = alignments</span><br><span class="line">        self.formats[<span class="string">'number_formats'</span>] = number_formats</span><br><span class="line">        self.formats[<span class="string">'protections'</span>] = protections</span><br><span class="line">        self.formats[<span class="string">'widths'</span>] = widths</span><br><span class="line">        <span class="comment"># self.formats['isDates'] = isDates</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeFormatToNewWorkbook</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sheetName <span class="keyword">in</span> self.data.keys():</span><br><span class="line">            ws = self.targetWorkbook[sheetName]</span><br><span class="line">            <span class="comment"># for x in range(1,self.titleLine+2):</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, ws.max_row + <span class="number">1</span>):</span><br><span class="line">                <span class="comment"># 表头</span></span><br><span class="line">                <span class="keyword">if</span> x &lt;= self.titleLine:</span><br><span class="line">                    xx = x</span><br><span class="line">                    <span class="comment"># ws.row_dimensions[x].height = self.formats['heights'][x]</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 表数据</span></span><br><span class="line">                    xx = self.titleLine + <span class="number">1</span></span><br><span class="line">                height = self.formats[<span class="string">'heights'</span>][xx]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> height == <span class="keyword">None</span> <span class="keyword">and</span> height &gt; <span class="number">0</span>:</span><br><span class="line">                    ws.row_dimensions[x].height = self.formats[<span class="string">'heights'</span>][xx]</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, ws.max_column + <span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># 表头</span></span><br><span class="line">                    <span class="keyword">if</span> x &lt;= self.titleLine:</span><br><span class="line">                        <span class="comment"># 路过空白单元格</span></span><br><span class="line">                        <span class="comment"># if ws.cell(x, y).value == '':</span></span><br><span class="line">                        <span class="comment">#     continue</span></span><br><span class="line">                        width = self.formats[<span class="string">'widths'</span>][y]</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> width == <span class="keyword">None</span> <span class="keyword">and</span> width &gt; <span class="number">0</span>:</span><br><span class="line">                            ws.column_dimensions[get_column_letter(y)].width = self.formats[<span class="string">'widths'</span>][y]</span><br><span class="line">                        xx = x</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># 表数据</span></span><br><span class="line">                        xx = self.titleLine + <span class="number">1</span></span><br><span class="line">                    ws.cell(x, y).style = self.formats[<span class="string">'styles'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).font = self.formats[<span class="string">'fonts'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).border = self.formats[<span class="string">'borders'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).fill = self.formats[<span class="string">'fills'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).alignment = self.formats[<span class="string">'alignments'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).number_format = self.formats[<span class="string">'number_formats'</span>][xx][y]</span><br><span class="line">                    ws.cell(x, y).protection = self.formats[<span class="string">'protections'</span>][xx][y]</span><br><span class="line"> </span><br><span class="line">                    <span class="comment"># if x&gt;self.titleLine and self.formats['isDates'][y]:</span></span><br><span class="line">                    <span class="comment">#     ws.cell(x, y).number_format = 'yyyy/mm/dd'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeDataToNewWorkbook</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> sheetName <span class="keyword">in</span> self.data.keys():</span><br><span class="line">            ws = self.targetWorkbook.create_sheet(sheetName)</span><br><span class="line">            <span class="comment"># 写入头文字</span></span><br><span class="line">            x = <span class="number">0</span>  <span class="comment"># 行号</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> self.header:</span><br><span class="line">                x += <span class="number">1</span></span><br><span class="line">                y = <span class="number">0</span>  <span class="comment"># 列号</span></span><br><span class="line">                <span class="keyword">for</span> cellValue <span class="keyword">in</span> row:</span><br><span class="line">                    y += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> cellValue == <span class="string">''</span>:</span><br><span class="line">                        ws.cell(x, y).value = cellValue</span><br><span class="line">            <span class="comment"># 写入数据</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> self.data[sheetName]:</span><br><span class="line">                ws.append(row)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clearSheetName</span><span class="params">(self, name, replaceAs=<span class="string">'-'</span>)</span>:</span></span><br><span class="line">        invalidChars = <span class="string">r':\/?*[]：'</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> invalidChars:</span><br><span class="line">            name = name.replace(c, replaceAs).strip()</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectTitleLine</span><span class="params">(self)</span>:</span></span><br><span class="line">        wb = xlrd.open_workbook(self.sourceFile)</span><br><span class="line">        ws = wb.sheet_by_index(self.sourceWorksheetIndex)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 保存一下最大行数、列数，以供其它（属性）地方使用</span></span><br><span class="line">        self.sourceWorkbookMaxRow = ws.nrows</span><br><span class="line">        self.sourceWorkbookMaxColumn = ws.ncols</span><br><span class="line"> </span><br><span class="line">        print(<span class="string">'打印所拆分工作表前10行，前5列数据：'</span>)</span><br><span class="line">        maxY = ws.ncols</span><br><span class="line">        <span class="keyword">if</span> ws.ncols &gt; <span class="number">5</span>:</span><br><span class="line">            maxY = <span class="number">5</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            tempList = []</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(maxY):</span><br><span class="line">                tempList.append(ws.cell(x, y).value)</span><br><span class="line">            print(<span class="string">'第%s行：'</span> % (x + <span class="number">1</span>), tempList)</span><br><span class="line"> </span><br><span class="line">        titleLine = <span class="number">2</span></span><br><span class="line">        n = input(<span class="string">'\n请输入标题行所在行号[2]：'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n == <span class="string">''</span>:</span><br><span class="line">            titleLine = int(n)</span><br><span class="line"> </span><br><span class="line">        self.titleLine = titleLine</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.selectSplitSheet()</span><br><span class="line">        self.selectTitleLine()</span><br><span class="line">        self.selectSplitColumn()</span><br><span class="line"> </span><br><span class="line">        print(<span class="string">'开始读取数据...'</span>)</span><br><span class="line">        self.readData()</span><br><span class="line">        print(<span class="string">'开始读取格式...'</span>)</span><br><span class="line">        self.readCellsStyle()</span><br><span class="line">        print(<span class="string">'开始写入数据至分表...'</span>)</span><br><span class="line">        self.writeDataToNewWorkbook()</span><br><span class="line">        print(<span class="string">'开始写入格式至分表...'</span>)</span><br><span class="line">        self.writeFormatToNewWorkbook()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, filename=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> filename == <span class="keyword">None</span>:</span><br><span class="line">            splitPath = os.path.split(self.sourceFile)</span><br><span class="line">            filename = splitPath[<span class="number">0</span>] + <span class="string">'/拆分_'</span> + splitPath[<span class="number">1</span>]</span><br><span class="line">        self.targetWorkbook.save(filename)</span><br><span class="line">        self.sourceWorkbook.close()</span><br><span class="line">        self.targetWorkbook.close()</span><br><span class="line">        <span class="keyword">return</span> filename</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">saveWorksheetToWorkbook</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, excelFile)</span>:</span></span><br><span class="line">        self.excelFile = excelFile</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveTo</span><span class="params">(self, savePath=None, addNumToFilename=True)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> savePath == <span class="keyword">None</span>:</span><br><span class="line">            splitPath = os.path.splitext(self.excelFile)</span><br><span class="line">            savePath = splitPath[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(savePath):</span><br><span class="line">                os.makedirs(savePath, exist_ok=<span class="keyword">True</span>)</span><br><span class="line"> </span><br><span class="line">        wb = openpyxl.load_workbook(self.excelFile)</span><br><span class="line">        sheetNames = wb.sheetnames</span><br><span class="line">        wb.close()</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># _input=input('正在保存各表至独立工作薄，文件名前是否加序号？[Y] Y/N：').strip().lower()</span></span><br><span class="line">        <span class="comment"># if _input=='n':</span></span><br><span class="line">        <span class="comment">#     addNumToFilename=False</span></span><br><span class="line"> </span><br><span class="line">        n=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> sheetName <span class="keyword">in</span> sheetNames:</span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line">            print(<span class="string">'保存'</span>, n, sheetName)</span><br><span class="line">            wb = openpyxl.load_workbook(self.excelFile)</span><br><span class="line">            <span class="keyword">for</span> ws <span class="keyword">in</span> wb.worksheets:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> sheetName == ws.title:</span><br><span class="line">                    wb.remove(ws)</span><br><span class="line"> </span><br><span class="line">            xh=<span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> addNumToFilename:</span><br><span class="line">                xh=str(n)</span><br><span class="line">            filename=<span class="string">'%s/%s%s.xlsx'</span> % (savePath, xh,sheetName)</span><br><span class="line">            wb.save(filename)</span><br><span class="line">            wb.close()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> savePath</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    file = <span class="string">r'C:\Users\Alterem\Desktop\汇总.xlsx'</span></span><br><span class="line">    file = sys.argv[<span class="number">1</span>]</span><br><span class="line">    se = splitExcel(file)</span><br><span class="line">    <span class="comment"># file = r'C:\Users\Alterem\Desktop\2019年积分排名－2019-07-09.xlsx'</span></span><br><span class="line">    <span class="comment"># se = splitExcel(file, 1, 3)</span></span><br><span class="line">    se.make()</span><br><span class="line">    f = se.save()</span><br><span class="line">    print(<span class="string">'拆分汇总文件：'</span>, f)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># f=r'C:\Users\Alterem\Desktop\汇总.拆分.xlsx'</span></span><br><span class="line">    saveTo = saveWorksheetToWorkbook(f)</span><br><span class="line">    p = saveTo.saveTo()</span><br><span class="line">    print(<span class="string">'拆分表保存文件夹：'</span>, p)</span><br><span class="line"> </span><br><span class="line">    input(<span class="string">'\n完成，按回车键退出。'</span>)</span><br></pre></td></tr></table></figure><p>欢迎提出问题</p><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;根据某一列，拆分成几个不同的EXCEL文件&lt;br&gt;操作方法：将EXCEL文件拖至EXE文件上，根据提示操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g7u1krpyrkg311j0jj18k.gi
      
    
    </summary>
    
    
      <category term="python" scheme="http://blog.alterem.top/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.alterem.top/tags/python/"/>
    
      <category term="excel" scheme="http://blog.alterem.top/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍、使用方法和总结</title>
    <link href="http://blog.alterem.top/2019/09/30/Lombok%E4%BB%8B%E7%BB%8D%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.alterem.top/2019/09/30/Lombok介绍、使用方法和总结/</id>
    <published>2019-09-30T02:17:26.000Z</published>
    <updated>2019-09-30T02:26:23.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章来源公众号：猿人谷</p></blockquote><h1 id="1-Lombok背景介绍"><a href="#1-Lombok背景介绍" class="headerlink" title="1 Lombok背景介绍"></a>1 Lombok背景介绍</h1><p>官方介绍如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Project Lombok makes java a spicier language by adding 'handlers' that know how to build and compile simple, boilerplate-free, not-quite-java code.</span><br></pre></td></tr></table></figure><p>大致意思是Lombok通过增加一些“处理程序”，可以让java变得简洁、快速。</p><h1 id="2-Lombok使用方法"><a href="#2-Lombok使用方法" class="headerlink" title="2 Lombok使用方法"></a>2 Lombok使用方法</h1><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>Lombok的使用跟引用jar包一样，可以在官网（<a href="https://projectlombok.org/download）下载jar包，也可以使用maven添加依赖：" target="_blank" rel="noopener">https://projectlombok.org/download）下载jar包，也可以使用maven添加依赖：</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们来分析Lombok中注解的具体用法。</p><h2 id="2-1-Data"><a href="#2-1-Data" class="headerlink" title="2.1 @Data"></a>2.1 @Data</h2><p>@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><p>官方实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PACKAGE) <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@Data</span>(staticConstructor=<span class="string">"of"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataExample</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String[] getTags() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(String[] tags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tags = tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"DataExample("</span> + <span class="keyword">this</span>.getName() + <span class="string">", "</span> + <span class="keyword">this</span>.getAge() + <span class="string">", "</span> + <span class="keyword">this</span>.getScore() + <span class="string">", "</span> + Arrays.deepToString(<span class="keyword">this</span>.getTags()) + <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> other <span class="keyword">instanceof</span> DataExample;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> DataExample)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    DataExample other = (DataExample) o;</span><br><span class="line">    <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getName() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getAge() != other.getAge()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (Double.compare(<span class="keyword">this</span>.getScore(), other.getScore()) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.deepEquals(<span class="keyword">this</span>.getTags(), other.getTags())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> temp1 = Double.doubleToLongBits(<span class="keyword">this</span>.getScore());</span><br><span class="line">    result = (result*PRIME) + (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">    result = (result*PRIME) + <span class="keyword">this</span>.getAge();</span><br><span class="line">    result = (result*PRIME) + (<span class="keyword">int</span>)(temp1 ^ (temp1 &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">    result = (result*PRIME) + Arrays.deepHashCode(<span class="keyword">this</span>.getTags());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Exercise</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Exercise&lt;T&gt; <span class="title">of</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Exercise&lt;T&gt;(name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Exercise(name="</span> + <span class="keyword">this</span>.getName() + <span class="string">", value="</span> + <span class="keyword">this</span>.getValue() + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> other <span class="keyword">instanceof</span> Exercise;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Exercise)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o;</span><br><span class="line">      <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getValue().equals(other.getValue())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = (result*PRIME) + (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">      result = (result*PRIME) + (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getValue().hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Getter-Setter"><a href="#2-2-Getter-Setter" class="headerlink" title="2.2 @Getter/@Setter"></a>2.2 @Getter/@Setter</h2><p>如果觉得@Data太过残暴（因为@Data集合了@ToString、@EqualsAndHashCode、@Getter/@Setter、@RequiredArgsConstructor的所有特性）不够精细，可以使用@Getter/@Setter注解，此注解在属性上，可以为相应的属性自动生成Getter/Setter方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PROTECTED) <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-NonNull"><a href="#2-3-NonNull" class="headerlink" title="2.3 @NonNull"></a>2.3 @NonNull</h2><p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Cleanup"><a href="#2-4-Cleanup" class="headerlink" title="2.4 @Cleanup"></a>2.4 @Cleanup</h2><p>该注解能帮助我们自动调用close()方法，很大的简化了代码。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="meta">@Cleanup</span> OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">      <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">      out.write(b, <span class="number">0</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则需如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">          <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">          out.write(b, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">          out.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        in.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-EqualsAndHashCode"><a href="#2-5-EqualsAndHashCode" class="headerlink" title="2.5 @EqualsAndHashCode"></a>2.5 @EqualsAndHashCode</h2><p>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(exclude=&#123;<span class="string">"id"</span>, <span class="string">"shape"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsAndHashCodeExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> transientVar = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@EqualsAndHashCode</span>(callSuper=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-ToString"><a href="#2-6-ToString" class="headerlink" title="2.6 @ToString"></a>2.6 @ToString</h2><p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将<code>includeFieldNames</code>参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p>使用Lombok的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span>(exclude=<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>, includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Square(super="</span> + <span class="keyword">super</span>.toString() + <span class="string">", width="</span> + <span class="keyword">this</span>.width + <span class="string">", height="</span> + <span class="keyword">this</span>.height + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ToStringExample("</span> + <span class="keyword">this</span>.getName() + <span class="string">", "</span> + <span class="keyword">this</span>.shape + <span class="string">", "</span> + Arrays.deepToString(<span class="keyword">this</span>.tags) + <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h2><p>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><p>Lombok示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(staticName = <span class="string">"of"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ConstructorExample</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ConstructorExample&lt;T&gt; <span class="title">of</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstructorExample&lt;T&gt;(description);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"description"</span>&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">ConstructorExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoArgsExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Lombok工作原理分析"><a href="#3-Lombok工作原理分析" class="headerlink" title="3 Lombok工作原理分析"></a>3 Lombok工作原理分析</h1><p>会发现在Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。自动生成的代码到底是如何产生的呢？</p><p>核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p><ul><li>运行时解析</li></ul><p>运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。</p><ul><li>编译时解析</li></ul><p>编译时解析有两种机制，分别简单描述下：</p><p>1）Annotation Processing Tool</p><p>apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：</p><ul><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行</li></ul><p>2）Pluggable Annotation Processing API</p><p><a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269</a>自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7hby9qfhhj30go023mx6.jpg" alt="123"></p><p>Lombok本质上就是一个实现了“<a href="https://www.jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269 API</a>”的程序。在使用javac的过程中，它产生作用的具体流程如下：</p><ol><li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li><li>运行过程中调用实现了“JSR 269 API”的Lombok程序</li><li>此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li><li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li></ol><p>拜读了Lombok源码，对应注解的实现都在HandleXXX中，比如@Getter注解的实现时HandleGetter.handle()。还有一些其它类库使用这种方式实现，比如<a href="https://github.com/google/auto" target="_blank" rel="noopener">Google Auto</a>、<a href="http://square.github.io/dagger/" target="_blank" rel="noopener">Dagger</a>等等。</p><h1 id="4-Lombok的优缺点"><a href="#4-Lombok的优缺点" class="headerlink" title="4. Lombok的优缺点"></a>4. Lombok的优缺点</h1><p>优点：</p><ol><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li></ol><p>缺点：</p><ol><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ol><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>Lombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。</p><p>知乎上有位大神发表过对Lombok的一些看法：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一种低级趣味的插件，不建议使用。JAVA发展到今天，各种插件层出不穷，如何甄别各种插件的优劣？能从架构上优化你的设计的，能提高应用程序性能的 ，</span><br><span class="line">实现高度封装可扩展的...， 像lombok这种，像这种插件，已经不仅仅是插件了，改变了你如何编写源码，事实上，少去了代码你写上去又如何？ </span><br><span class="line">如果JAVA家族到处充斥这样的东西，那只不过是一坨披着金属颜色的屎，迟早会被其它的语言取代。</span><br></pre></td></tr></table></figure><p>虽然话糙但理确实不糙，试想一个项目有非常多类似Lombok这样的插件，个人觉得真的会极大的降低阅读源代码的舒适度。</p><p>虽然非常不建议在属性的getter/setter写一些业务代码，但在多年项目的实战中，有时通过给getter/setter加一点点业务代码，能极大的简化某些业务场景的代码。所谓取舍，也许就是这时的舍弃一定的规范，取得极大的方便。</p><p>我现在非常坚信一条理念，任何编程语言或插件，都仅仅只是工具而已，即使工具再强大也在于用的人，就如同小米加步枪照样能赢飞机大炮的道理一样。结合具体业务场景和项目实际情况，无需一味追求高大上的技术，适合的才是王道。</p><p>Lombok有它的得天独厚的优点，也有它避之不及的缺点，熟知其优缺点，在实战中灵活运用才是王道。</p><p>参考：</p><p><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a></p><p><a href="https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv</a></p><p><a href="https://www.zhihu.com/question/42348457" target="_blank" rel="noopener">https://www.zhihu.com/question/42348457</a></p><p><a href="https://blog.csdn.net/ghsau/article/details/52334762" target="_blank" rel="noopener">https://blog.csdn.net/ghsau/article/details/52334762</a></p><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章来源公众号：猿人谷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-Lombok背景介绍&quot;&gt;&lt;a href=&quot;#1-Lombok背景介绍&quot; class=&quot;headerlink&quot; title=&quot;1 Lombok背景介绍&quot;&gt;&lt;/a&gt;1 Lo
      
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alterem.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>高可用的一些思考和理解</title>
    <link href="http://blog.alterem.top/2019/09/29/%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83%E5%92%8C%E7%90%86%E8%A7%A3/"/>
    <id>http://blog.alterem.top/2019/09/29/高可用的一些思考和理解/</id>
    <published>2019-09-29T02:30:40.000Z</published>
    <updated>2019-09-29T03:12:12.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来源公众号：匠心零度</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7g73pdqldj30hs0c3752.jpg" alt="img"></p><p>在目前的互联网大时代，在高并发等冲击下，还必须保证<strong>服务高可用</strong>，如果服务不高可用那么意味着：</p><ul><li>系统不是7*24小时提供服务，那么用户体验就特别差了，可能用户下次不用了，留不住用户。</li><li>当系统不可用的时候，对公司的形象是有所影响的，BAT类似这种技术都是象征的。</li><li>最重要的一点，当系统不可用的时候，直接损失就是金钱！！！基本都是秒算损失的，依稀记得<strong>2015年5月28日携程网瘫痪事件</strong>，按照携程一季度财报公布的数据，携程宕机的损失为平均每小时106.48万美元。</li></ul><p>高可用是非常复杂的，自己水平有限，并不能涵盖那么多，只能说是自己对高可用的一些思考和理解。</p><h2 id="那么怎么使系统高可用呢？"><a href="#那么怎么使系统高可用呢？" class="headerlink" title="那么怎么使系统高可用呢？"></a>那么怎么使系统高可用呢？</h2><blockquote><p>我们不能让服务器不挂，让服务不挂，那么怎么样让这种必败的局面不会有问题呢，就是可以挂，服务可以坏，那么怎么让系统还可以提供服务呢？</p></blockquote><p>首先如果机器有很多，服务有很多，就算坏了一部分也没有问题啊，必败的局面得到的解决。下面进行一步一步剖析，如果机器里面存储了特定值，那么就不能扩展，必须是用挂的那台机器，那么这个是不行的，机器问题好解决，相同的配置替代是容易的，那么应用服务也是类似，应用服务可以不存储状态有关的值在任何机器而自己内部不会有存储一些特定的特征数据，如果有就没办法很容易的扩展，只有当每个主件都是一样的时候，无任何差异，我们才好替换，容易扩展，那么这个就叫着<strong>服务的无状态化。</strong></p><blockquote><p>假如目前服务已经是无状态化了，那么如何让系统动态的感知到服务挂了呢？不然请求还是回去到挂的那台机器，怎么转移到新的机器呢？那么可能就需要<strong>服务发现与注册了。</strong></p><p>如果达到了上面的情况，应对一般的情况基本已经够了，但是互联网是复杂的，刚刚说的机器坏，服务坏了的问题，那么如果网络出现短暂不通因为怎么办呢？</p></blockquote><p>所以服务之间应该有<strong>心跳的检测，</strong>来定期看看是否可通（机器坏了，服务挂了，网络不通了）反正就是不可达了。这种情况通过服务注册与发现即可解决，但是有时候网络是闪断下那么在那种特定的情况呢？比如刚刚a服务已经把请求发送给了b服务，b服务已经接收到请求了，那么这个时候忽然网络断了，但是b服务进行把逻辑处理做完成了，但是a服务反应的就是没有响应，前台超时了，那么再一次触发下，那么如果b服务把之前的逻辑再做一遍是否存在问题呢？ 比如支付，已经付款200元，难道再付款200元吗？这里需要提到一个<strong>幂等性</strong>的设计概念，什么是幂等呢，就是多次执行结果都一样，如果有幂等性设计那么就不怕这种情况了，在没有得到反馈情况<strong>重试</strong>即可，也不会出现问题。</p><blockquote><p>达到上面说的这些就是应对机器坏了，服务挂了，网络不通或者闪断等情况已经基本没有什么大问题了，那么目前互联网都是高并发，那么在高并发的情况，如何来提高系统的能力的？</p></blockquote><p>就和搬东西一样，一个人慢，可以多来点人一起帮东西，由于上面的架构是可以添加机器，服务的，那么很容易想到的就是多来点机器和服务。那么这样一定比机器少要快的，比如有5台机器，那么很多请求过来了，用什么策略让他们分摊到不同的机器呢？通过设备，通过一些软件层面，但是其中一定有服务发现注册，不然没办法动态知道节点变化，还有就是对一些信息的控制，黑白名单，访问频率等。<strong>很多时候，加机器可能看起来比较low，但是有时候的确比较有效，但是也不能一味的加机器，有些情况加机器是解决不了的了。</strong></p><p>机器多了的确快了，如果在服务里面有一个阻塞方法，那么就算服务在多也没用，所以必须注意关于<strong>服务超时的问题，</strong>由于服务是幂等的，就算再次执行也没有任何关系，有了超时就不会卡很久影响到后面的服务了（下游服务宕机了，线程死锁了，下游服务忙等等）。</p><p>关于同步，异步的一些设计模式，在有些必须顺序执行的业务场景就必须要使用同步了，在非必须的这种场景那么用异步一定比同步处理的并发量要大（由于中间件经历很多步骤，所以从单个请求的总时间来看并不一定有同步的快，但是从一个宏观的角度来看提高并发的请求会大很多了）。简单聊聊异步，在一个服务内部，异步那么就需要提到多线程了，多线程很多有点提高cpu利用率，提高系统性能，但是实现成本要高很多了，那么不同服务直接的如何异步呢，消息中间件了，（消息中间件很难，第一要保证<strong>真异步，</strong>第二需要保证<strong>不重不漏</strong>，就这2点真的很难，特别是在大数据情况下），特别是网络I/O需要重点考虑异步模型，不过Netty封装的挺好了。</p><blockquote><p>由于每个机器，或者服务都是有上限的，如果量一下泄洪式的过来并且不是他的能力可以处理的，那么该如果解决呢？</p></blockquote><p>该问题在生活中到处可见，刚刚好国庆回家、出去玩，随处可见该事项体现，比如过安检的时候，有一个保安专门拿一个牌看人差不多了，让后面的人等，等处理的查不多了，在让后面的人进行，之后类似在等。，但是如果有级别高的，或者车快发车了，一般让他们先过，在软件架构里面应该叫<strong>限流、服务降级，</strong>一般有两种控制策略（1，拒绝部分请求，2，关闭部分服务）可能之前的时候都提到了关闭部分服务，不过现在不推荐了（<strong>毕竟也是公司技术实力的体现</strong>），目前重点说的是关于拒绝部分请求，关于这块的控制在那里添加？就是那块需要控制，应该每层都需要加下该控制。</p><p>依稀记得行业里面有句话，<strong>高并发、高可用三大法宝：限流、降级、缓存</strong>，关于缓存，大家应该接触的最多，互联网业务特点就是读多写少，那么就非常适合使用缓存了。</p><blockquote><p>由于所以请求在一个服务，扩展还是不好扩展，而且统一服务里面有些调用特别多，有些调用就比较少，因为继续划分，继续拆，这样还是可以再次提高并发。</p></blockquote><p><strong>微服务了，</strong>微服务概念很多，首先提到的就是搞垂直拆分，很容易理解，之后垂直业务可能也很多，还需要继续水平拆分，（这里一切的拆分依据都是根据自己公司的业务，理解越深才的越好）。</p><p>通过上面的这些，服务可以挂，机器可以坏，网络不通或者闪断的问题都解决了，并且可以提高并发，尽最大努力来让服务高可用。<strong>那么由于这么做带来了很多问题，</strong>所以需要把这些修改带来的问题解决：</p><ul><li>以前在一个服务里面，对于事务的控制很容易，那么微服务之后，事务的控制就显的特别重要了，很多时候我们不能强一致性，但是我们可以做到<strong>最终一致性</strong>就是可以的。</li><li>调用链监控也就显得特别重要了，一起的还有预警也特别重要了。</li><li>分布式日志也显得特别重要了。</li><li>高级的jstack、Btrace在真实环境就是特别重要的。</li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><blockquote><p>本人水平有限，难免会有一些理解偏差的地方，如果发现，欢迎各位积极指出，感谢！！！</p></blockquote><p><strong>欢迎关注微信公众号​：</strong></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文来源公众号：匠心零度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g7g73pdqldj30hs0c3752.jpg&quot; alt=&quot;img&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="高可用" scheme="http://blog.alterem.top/categories/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【Python】哄女朋友的那些奇技淫巧</title>
    <link href="http://blog.alterem.top/2019/09/27/%E3%80%90Python%E3%80%91%E5%93%84%E5%A5%B3%E6%9C%8B%E5%8F%8B%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <id>http://blog.alterem.top/2019/09/27/【Python】哄女朋友的那些奇技淫巧/</id>
    <published>2019-09-27T02:00:20.000Z</published>
    <updated>2019-09-27T02:52:54.181Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7duo28cdkj311s0og77j.jpg" alt="img"></p><blockquote><p>本文来源公众号： <strong>Python乱炖</strong></p><p><img src="https://mp.weixin.qq.com/mp/qrcode?scene=10000004&size=102&__biz=MzU1NDcwNTE2OA==&mid=2247486190&idx=1&sn=a1707f91b23d437f758131818d73dda4&send_time=" alt="欢迎关注公众号" style="width: 100px"></p></blockquote><h3 id="Python里面的奇技淫巧"><a href="#Python里面的奇技淫巧" class="headerlink" title="Python里面的奇技淫巧"></a>Python里面的奇技淫巧</h3><blockquote><p><strong>声明</strong></p><p><strong>“以下所有模块均可</strong></p><p><strong>使用pip直接安装”</strong></p></blockquote><p><strong>说python是</strong></p><p><strong>所有编程语言里面</strong></p><p><strong>最奇葩的语言</strong></p><p><strong>这肯定是没错了</strong></p><p><strong>它可以做</strong></p><p><strong>自动化，爬虫，数据，AI，机器学习</strong></p><p><strong>这些我们暂且不说</strong></p><p><strong>可是它竟然还可以</strong></p><p><strong>撩妹</strong></p><p><strong>撩到妹</strong></p><p><strong>定位女朋友</strong></p><p><strong>和女朋友聊天</strong></p><p><strong>天天和女朋友早晚安</strong></p><p><strong>给女朋友打电话</strong></p><p><strong>讨女朋友开心</strong></p><p><strong>让女朋友崇拜你</strong></p><p><strong>………</strong></p><p><strong>怎么样？</strong></p><p><strong>够厉害吧</strong></p><p><strong>赶紧跟着狗哥</strong></p><p><strong>来看看python里面的奇技淫巧吧！</strong></p><h3 id="pinyin"><a href="#pinyin" class="headerlink" title="pinyin"></a>pinyin</h3><p><strong>第一个就是我们的pinyin模块了，这个模块骚就骚在可以直接把中文汉字转化成中文的汉语拼音，甚至连第几声发音都可以给你搞出来，具体使用很简单，导入后直接使用get方法即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pinyin</span><br><span class="line">transf = pinyin.get(<span class="string">"狗哥"</span>)</span><br><span class="line">trans2 = pinyin.get(<span class="string">"狗哥"</span>, format=<span class="string">"strip"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTDKIkaKweias6xhicp6XyMFw1np097ECXaia3yePY2qO7IcibOBicod7luodw/640?wx_fmt=png" alt="img"></p><h3 id="qrcode"><a href="#qrcode" class="headerlink" title="qrcode"></a>qrcode</h3><p><strong>下面这个是我们的二维码生成器，可以将文字，号码，网址存放在二维码中，只需要只用make方法去生成二维码，如何使用save方法保存二维码图片即可。很简单的两部搞定！下面我们来看一个栗子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line">words=<span class="string">'https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzU1NDcwNTE2OA==&amp;scene=126#wechat_redirect'</span></span><br><span class="line">img = qrcode.make(words)</span><br><span class="line">img.save(<span class="string">'test.png'</span>)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTDN4vB7pibGCvaTOoicI2jjTJT3iciaDqCsd36PpUkib2lcXkUnE8cFbfXL6g/640?wx_fmt=png" alt="img"></p><h3 id="myqr"><a href="#myqr" class="headerlink" title="myqr"></a>myqr</h3><p><strong>如果说刚刚的qrcode已经足够神奇了的话，那这个将会更加神奇，因为它可以以图片为背景来生成二维码，背景图片可以是动态gif也可以是静态jpg，png，整个生成二维码的步骤也要比上面简单许多，你甚至都不需要敲代码就可以享受到动态二维码的美好，可以直接在终端（cmd）敲一句口令即可生成二维码！（需要安装好myqr）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myqr <span class="string">"https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzU1NDcwNTE2OA==&amp;scene=126#wechat_redirect"</span> -v 1 -l Q -n <span class="string">"s_qr.gif"</span> -p s.gif -con 1.2 -bri 1.2 -c</span><br></pre></td></tr></table></figure><p><strong>整个口令你需要修改的就是：</strong></p><p><strong>url网址修改成你需要的</strong></p><p><strong>s.gif修改成你自己图片的地址</strong></p><p><strong>其他的参数你不知道什么意思均可以不动</strong></p><p><strong>如果想了解具体参数是什么意思，可参考狗哥公众号内python生成二维码那片文章。</strong></p><p><strong>效果如下：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/fgb8fjyMib2QAo8QN6ic2ChGPZc6gCegJ06Vr0W2ugT7NrZDIWkWtENvIpvQyOUrc0ToVQBaQLgPWBKXalEgjyug/640?wx_fmt=gif" alt="img"></p><h3 id="jieba"><a href="#jieba" class="headerlink" title="jieba"></a>jieba</h3><p><strong>jieba，真的就是结巴的意思，主要是用来进行分词的。</strong></p><p><strong>jieba 可以**</strong>把一句话拆分成多个词。**</p><p><strong>从一句话（一段话）中提取最重要的几个关键词。</strong></p><p><strong>最常用的功能应该就是这些吧，分词之后结合 TF-IDF，就可以做搜索工具和相关推荐了。</strong></p><p><strong>狗哥推荐：结合本次推荐的这些模块，使用结巴工具来和女朋友聊天，是个不错的主意！</strong></p><p>下面看看切割示范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">string = <span class="string">"大家都说狗哥好，狗哥帅气人又好"</span></span><br><span class="line">sl = jieba.cut(string, cut_all=<span class="keyword">True</span>)</span><br><span class="line">print(<span class="string">'全的模式:'</span>, list(sl))</span><br><span class="line">sl = jieba.cut(string, cut_all=<span class="keyword">False</span>)</span><br><span class="line">print(<span class="string">"精确模式:"</span>, list(sl))</span><br><span class="line">sl = jieba.cut(string)</span><br><span class="line">print(<span class="string">'搜索模式:'</span>, list(sl))</span><br></pre></td></tr></table></figure><p><strong>结巴还有很多高级的方法，希望大家多多发掘，如果实在懒，在狗哥的公众号里面搜一下也就找到了。</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTDxCOZIDKWcAc67cJL0GKKKCZicEZcHTWxsibUGrqibsw0Tw83nuhrNhjyQ/640?wx_fmt=png" alt="img"></p><p><strong>itchat/wxpy</strong></p><p><strong>itchat和wxpy这两个模块功能都差不多，都是用于微信聊天的，可以用来获取朋友圈好友的数据，也可以用来和好友聊天自动回复等等。（接上图灵机器人也是无敌了）</strong></p><p><strong>使用itchat很简单，导入模块后调用login方法便可以直接扫码登陆了：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line">itchat.login()</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTD0PiaHwcUFibbLRlHgGHnS188cNSlpUicpKN0A4eiaicYGgPJtu4WL5ibM2fw/640?wx_fmt=png" alt="img"></p><p><strong>登陆了之后可以通过get_friends方法获取到所有的微信好友</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">friends = itchat.get_friends(update=<span class="keyword">True</span>)[<span class="number">0</span>:]</span><br></pre></td></tr></table></figure><p><strong>至于获取微信好友要干啥，那就随你了，狗哥直接教你发送消息吧，直接使用send方法指明发送对象即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = itchat.search_friends(<span class="string">"亲爱的"</span>)userName = users[<span class="number">0</span>][<span class="string">'UserName'</span>]print(userName)itchat.send(<span class="string">'亲爱的，送你一个杨树林要不要？'</span>, toUserName=userName)</span><br></pre></td></tr></table></figure><p><strong>这边狗哥直接选择了一个用户直接发送消息</strong></p><p><strong>当然，我们除了发送消息，还可以设置自动回复：</strong></p><p><strong>定义几个方法，调用itchat自带的装饰器即可：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reply</span><span class="params">(msg)</span>:</span></span><br><span class="line">   itchat.send((<span class="string">'23333'</span>), msg[<span class="string">'FromUserName'</span>])</span><br><span class="line"><span class="meta">@itchat.msg_register([PICTURE])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_replay</span><span class="params">(msg)</span>:</span></span><br><span class="line">   itchat.send((<span class="string">'最近又漂亮了'</span>),</span><br><span class="line">           msg[<span class="string">'FromUserName'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register([RECORDING])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rec_replay</span><span class="params">(msg)</span>:</span></span><br><span class="line">   itchat.send((<span class="string">'连声音都是这么迷人'</span>),</span><br><span class="line">           msg[<span class="string">'FromUserName'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register([VIDEO,])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">video_replay</span><span class="params">(msg)</span>:</span></span><br><span class="line">   itchat.send((<span class="string">'我没流量了，视频打不开啊'</span>),</span><br><span class="line">           msg[<span class="string">'FromUserName'</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register([SHARING])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">share_replay</span><span class="params">(msg)</span>:</span></span><br><span class="line">   itchat.send((<span class="string">'这链接我这么怎么点不进去啊'</span>),</span><br><span class="line">           msg[<span class="string">'FromUserName'</span>])</span><br></pre></td></tr></table></figure><p><strong>没错定义好回复的对象，只要登陆上了，这些回复就会生效了！</strong></p><p><strong>狗哥测试的一个例子：</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTDaypMUI21xW9cGKU5Gte3d7rMCu5RK334FpbU2SD9QWrHdlsjaNQqGg/640?wx_fmt=png" alt="img"></p><h3 id="wordcloud"><a href="#wordcloud" class="headerlink" title="wordcloud"></a>wordcloud</h3><p><strong>下面这个看起来比较鬼畜，但是其实在数据可视化里面它的用处还是比较强大的。</strong></p><p><strong>词云这个东西一般与numpy，matplotlib，jieba，pillow连用，用起来也是挺麻烦的</strong></p><p><strong>狗哥这里整理了一个简单的版本供大家参考：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud,\</span><br><span class="line">   ImageColorGenerator,\</span><br><span class="line">   STOPWORDS</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'content.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   word = (f.read())</span><br><span class="line">   f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片模板和字体</span></span><br><span class="line">image = np.array(Image.open(<span class="string">'ditu.jpg'</span>))</span><br><span class="line">font = <span class="string">r'C:\\Windows\\fonts\\msyh.ttf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去掉英文，保留中文</span></span><br><span class="line">resultword = re.sub(<span class="string">"[A-Za-z0-9\[\`\~\!\@\#\$\^\&amp;\*\(\)\=\|\&#123;\&#125;"</span></span><br><span class="line">                   <span class="string">"\'\:\;\'\,\[\]\.\&lt;\&gt;\/\?\~\。\@\#\\\&amp;\*\%]"</span>,</span><br><span class="line">                   <span class="string">""</span>, word)</span><br><span class="line">wordlist_after_jieba = jieba.cut(resultword)</span><br><span class="line">wl_space_split = <span class="string">" "</span>.join(wordlist_after_jieba)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置停用词</span></span><br><span class="line">sw = set(STOPWORDS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键一步</span></span><br><span class="line">my_wordcloud = WordCloud(scale=<span class="number">4</span>,</span><br><span class="line">                        font_path=font,</span><br><span class="line">                        mask=image,</span><br><span class="line">                        stopwords=sw,</span><br><span class="line">                        background_color=<span class="string">'white'</span>,</span><br><span class="line">                        max_words=<span class="number">100</span>,</span><br><span class="line">                        max_font_size=<span class="number">60</span>,</span><br><span class="line">                        random_state=<span class="number">20</span>).\</span><br><span class="line">   generate(wl_space_split)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示生成的词云</span></span><br><span class="line">plt.imshow(my_wordcloud)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存生成的图片</span></span><br><span class="line">my_wordcloud.to_file(<span class="string">'result.jpg'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fgb8fjyMib2T1k20mT0cyWZUZQgdScaTD7Dkp5ZicX7XnxiaFbVyJ1JVsJJvtZZjKKvJF4a6SCoXUe4kFzbOp8Clw/640?wx_fmt=png" alt="img"></p><p>欢迎关注微信公众号​：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7d3llw1nkj30b40b4wee.jpg" alt="欢迎关注公众号" style="width: 100px"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g7duo28cdkj311s0og77j.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文来源公众号： &lt;strong&gt;Python乱炖&lt;/s
      
    
    </summary>
    
    
      <category term="python" scheme="http://blog.alterem.top/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.alterem.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube的使用-在idea&amp;eclipse中安装与使用sonarlint</title>
    <link href="http://blog.alterem.top/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%9C%A8idea&amp;eclipse%E4%B8%AD%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8sonarlint/"/>
    <id>http://blog.alterem.top/2019/09/26/SonarQube的使用-在idea&amp;eclipse中安装与使用sonarlint/</id>
    <published>2019-09-26T03:24:31.000Z</published>
    <updated>2019-09-26T04:48:25.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>​        代码质量管理的开源平台，用于管理源代码的质量 通过插件形式，可以支持包括java,C#,C/C++,PL/SQL,Cobol,JavaScrip,Groovy等等二十几种编程语言的代码质量管理与检测。集成了CheckStyle，PMD，Findbugs等工具校验规则，具有重复代码发现，代码测试覆盖率，代码注释率，及所有的检测率变化追踪的功能特性。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h3><p>​        SonarQube:开源的代码质量管控平台，我们使用的<a href="http://localhost:9000即为SonarQube。" target="_blank" rel="noopener">http://localhost:9000即为SonarQube。</a></p><p>​        SonarLint:一个扩展插件，可以安装在idea与eclipse等开发工具中</p><h3 id="Eclipse中的使用"><a href="#Eclipse中的使用" class="headerlink" title="Eclipse中的使用"></a><strong>Eclipse中的使用</strong></h3><h4 id="1、-安装"><a href="#1、-安装" class="headerlink" title="1、  安装"></a>1、  安装</h4><p>​            help -&gt; eclipse marketplace…，搜索sonarlint, Install。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpkcikrj30u00xmjwd.jpg" alt="eclipse marketplace"></p><h4 id="2、-使用"><a href="#2、-使用" class="headerlink" title="2、  使用"></a>2、  使用</h4><p>打开java文件，soanrlint会自动进行检测，对于不规范或有问题的代码会在下方划蓝色波浪线，如图：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crplk0uej30vs0c2ac6.jpg" alt="soanrlint"></p><p>鼠标放在蓝色部分会有弹框显示错误信息或建议修改信息</p><p>点击“open description of rule”可以查看具体的错误描述，错误示例及修改示例。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpmsn5bj322s0okgqi.jpg" alt="info"></p><p>在项目或单个java文件上右键 -&gt; sonarlint -&gt; Analyze 进行手动操作分析。这样SonarLint Report面板中查看所有的异常信息</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpo0r2rj323a0om77e.jpg" alt="error"></p><h4 id="3、Server"><a href="#3、Server" class="headerlink" title="3、Server"></a>3、Server</h4><p>连接SonarQube的主要目的是同步分析规则、质量规则与自定义设置。操作如下：</p><p>从Window -&gt; show view 中找到SonarLint Bindings打开；</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crppkx26j30gw0n0gnz.jpg" alt="open"></p><p>在该面板空白处 右键创建 server连接，选择SonarQube</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crprred5j30zy0n0gof.jpg" alt="new"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpsooc8j30zy0n0gmw.jpg" alt="url"></p><p>url为：<a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpu238zj30zy0n0jsr.jpg" alt="utoken"></p><p>使用UserName+Password或者token登陆</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpv1exlj30zy0n0403.jpg" alt="token"></p><p>没有token可以点击右侧按钮创建，或者寻找管理员创建</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpvh926j30zy0n075m.jpg" alt="locahost"></p><p>配置名称</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpwgsltj30zy0n0400.jpg" alt="finish"></p><p>完成服务配置</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpxi9vcj30t60n0gmt.jpg" alt="bind"></p><p>绑定工程，点击add</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpyt430j30l80ksab3.jpg" alt="add"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crpzm1ioj30t60n0ta4.jpg" alt="next"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq1cujoj31qm0sawmn.jpg" alt="setting"></p><p>输入sonarQube中创建的工程的名称</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq2us1yj30t60n0abm.jpg" alt="f"></p><p>完成</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq4fikgj323k0oatb7.jpg" alt></p><h4 id="4、-结果同步SonarQube显示"><a href="#4、-结果同步SonarQube显示" class="headerlink" title="4、 结果同步SonarQube显示"></a>4、 结果同步SonarQube显示</h4><p>在maven的settings.xml中配置如下：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq5bah1j31ey0gadil.jpg" alt="setting"></p><p>配置完成后，使用soanr:sonar命令运行项目，此部分要求JDK为1.8。<code>clean install sonar:sonar</code></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq6lwvqj326c0ra4ci.jpg" alt="package"></p><p>可以打开<a href="http://localhost:9000/dashboard?id=com.xxx查看对应的错误信息，也可以在SonarQube点击Issues进行查看" target="_blank" rel="noopener">http://localhost:9000/dashboard?id=com.xxx查看对应的错误信息，也可以在SonarQube点击Issues进行查看</a></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq78j98j31jw0b2gob.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq8wrubj315y0u0gof.jpg" alt></p><h3 id="IDEA中使用"><a href="#IDEA中使用" class="headerlink" title="IDEA中使用"></a><strong>IDEA中使用</strong></h3><h4 id="1、-安装-1"><a href="#1、-安装-1" class="headerlink" title="1、  安装"></a>1、  安装</h4><p>​            File -&gt; settings -&gt; plugins 搜索sonarLint，Install。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crq9jvc4j31cg070jry.jpg" alt="install"></p><h4 id="2、-使用-1"><a href="#2、-使用-1" class="headerlink" title="2、 使用"></a>2、 使用</h4><p>在左下角点击隐藏面板，可以看到sonarLint，打开</p><p>打开java文件，soanrlint会自动进行检测，对于不规范或有问题的代码会添加暗金色的背景色，鼠标放上去会有如图提示：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqb6mulj315o0u0do2.jpg" alt="error"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqcjzsnj32hc0u0grs.jpg" alt="error"></p><p>也可以通过点击上图的绿色倒三角手动执行分析。</p><h4 id="3、-Server"><a href="#3、-Server" class="headerlink" title="3、 Server"></a>3、 Server</h4><p>连接SonarQube的主要目的是同步分析规则、质量规则与自定义设置。操作如下：</p><p>从File -&gt; settings -&gt; OtherSettings中找到“SonarLint General Settings”打开；</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqepujaj31nq0q4n0w.jpg" alt></p><p>点击加号，输入一个name，如localhost;选择SonarQube，Url为<a href="http://localhost9000；" target="_blank" rel="noopener">http://localhost9000；</a></p><p>选择Login/Password或者token，输入账号与密码或者token；</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqhq14oj31nq0q476k.jpg" alt></p><p>finish</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqjubgij31nq0q4dhi.jpg" alt="finish"></p><p>勾选“Enable binding to remote SonarQube Server”,选择添加的server,搜索到你需要绑定的项目，然后选择确认。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqkwbjjj313s0u0tat.jpg" alt></p><h4 id="4、结果同步SonarQube显示"><a href="#4、结果同步SonarQube显示" class="headerlink" title="4、结果同步SonarQube显示"></a>4、结果同步SonarQube显示</h4><p>同Eclipse部分，此部分要求JDK为1.8。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqni0s6j31330u0adk.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7crqpbotyj31330u0adk.jpg" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​        代码质量管理的开源平台，用于管理源代码的质量 通过插件形式，可以支持包括java,C#,
      
    
    </summary>
    
    
      <category term="SonarQube" scheme="http://blog.alterem.top/categories/SonarQube/"/>
    
      <category term="SonarLint" scheme="http://blog.alterem.top/categories/SonarQube/SonarLint/"/>
    
    
      <category term="SonarQube" scheme="http://blog.alterem.top/tags/SonarQube/"/>
    
      <category term="SonarLint" scheme="http://blog.alterem.top/tags/SonarLint/"/>
    
  </entry>
  
  <entry>
    <title>[SonarQube的使用] SonarQube安装</title>
    <link href="http://blog.alterem.top/2019/09/26/SonarQube%E7%9A%84%E4%BD%BF%E7%94%A8-SonarQube%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.alterem.top/2019/09/26/SonarQube的使用-SonarQube安装/</id>
    <published>2019-09-26T03:15:44.000Z</published>
    <updated>2019-09-26T03:17:51.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工欲善其事必先利其器"><a href="#工欲善其事必先利其器" class="headerlink" title="工欲善其事必先利其器"></a>工欲善其事必先利其器</h2><h3 id="一-SonarQube代码质量检查工具简介"><a href="#一-SonarQube代码质量检查工具简介" class="headerlink" title="一 . SonarQube代码质量检查工具简介"></a>一 . SonarQube代码质量检查工具简介</h3><blockquote><p>Sonar (SonarQube)是一个开源平台，用于管理源代码的质量</p><p>Sonar 不只是一个质量数据报告工具，更是代码质量管理平台</p></blockquote><p>支持Java, C#, C/C++, PL/SQL, Cobol, JavaScrip, Groovy 等等二十几种编程语言的代码质量管理与检测。</p><p>Sonar可以从以下七个维度检测代码质量，而作为开发人员至少需要处理前5种代码质量问题。</p><ol><li><p>不遵循代码标准</p></li><li><p>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写。</p></li><li><p>潜在的缺陷</p><p>sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检 测出潜在的缺陷。</p></li><li><p>糟糕的复杂度分布</p><p>文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员 难以理解它们, 且如果没有自动化的单元测试，对于程</p><p>序中的任何组件的改变都将可能导致需要全面的回归测试。</p></li><li><p>重复</p><p>显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示 源码中重复严重的地方。</p></li><li><p>注释不足或者过多</p><p>没有注释将使代码可读性变差，特别是当不可避免地出现人员变动 时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷。</p></li><li><p>缺乏单元测试</p><p>sonar可以很方便地统计并展示单元测试覆盖率。</p></li><li><p>糟糕的设计</p><p>通过sonar可以找出循环，展示包与包、类与类之间的相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方</p><p>的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测藕合。</p></li></ol><h4 id="为什么要选择sonarQube"><a href="#为什么要选择sonarQube" class="headerlink" title="为什么要选择sonarQube?"></a>为什么要选择sonarQube?</h4><p>个人使用之后认为 : sonarQube的优势如下(相比于阿里编码规约这种市面上常见类似软件):</p><ol><li><p>更加优秀的图形化界面</p><p>基本上通过界面就可以对自己项目的代码状况一目了然</p></li><li><p>可以查询出其它软件难以定位到的问题</p><p>比如 : </p><p>可能导致空指针异常的问题 (对象在进行使用前没有加空的判断)</p><p>可能导致内存泄漏的问题, 在try catch 块里面,直接使用e.printStackTrace()将堆栈信息打印到内存的</p><p>可能导致的漏洞 : 成员变量使用public定义的</p><p>还有诸如 : 流等未关闭或者是非正常关闭都能够检测出来!</p><p>功能非常强大!!</p></li></ol><h3 id="二-安装："><a href="#二-安装：" class="headerlink" title="二. 安装："></a>二. 安装：</h3><h4 id="2-1-安装SonarQube-web-server"><a href="#2-1-安装SonarQube-web-server" class="headerlink" title="2.1 安装SonarQube web server"></a>2.1 安装SonarQube web server</h4><ol><li><p>首先确保安装了jdk1.8 +</p></li><li><p>到此链接 <a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">https://www.sonarqube.org/downloads/</a> </p><p>下载sonalqube(下载社区版,是开源的),</p></li></ol><p>我下载的是sonarqube-7.2.1，因为最新版<strong>7.9.1</strong>需要<strong>jdk11</strong>支持</p><p>并解压,解压完之后的目录如下 :</p><p>  <img src="https://i.loli.net/2019/07/23/5d36fc50c7a2434782.png" alt></p><ol start="3"><li><p>到解压目录的bin\macosx-universal-64(对应系统)目录下:</p><p>linux、Mac <code>sh sonar.sh start</code>启动</p><p>windows 双击<code>StartSonar.bat</code> 启动</p></li><li><p>到浏览器界面,输入 : <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> </p><p>如果能访问表明安装成功</p></li></ol><h4 id="2-2-安装数据库"><a href="#2-2-安装数据库" class="headerlink" title="2.2 安装数据库"></a>2.2 安装数据库</h4><ol><li><p>版本要求:</p><p>在conf目录下的sonar.properties文件下:</p><p>有这样一行配置 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#----- MySQL &gt;=5.6 &amp;&amp; &lt; 8.0</span><br></pre></td></tr></table></figure></li><li><p>为sonarqube 创建一个数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> sonar;</span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br></pre></td></tr></table></figure></li><li><p>创建sonarqube用户并进行授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>; </span><br><span class="line"><span class="comment">-- 创建用户并设置密码</span></span><br><span class="line"><span class="comment">-- username 为创建的用户名</span></span><br><span class="line"><span class="comment">-- host 为对应的主机地址,本地就是localhost</span></span><br><span class="line"><span class="comment">-- password 为设置的密码</span></span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'username'</span>@<span class="string">'localhost'</span>;</span><br><span class="line"><span class="comment">-- 对用户进行授权操作</span></span><br></pre></td></tr></table></figure></li><li><p>修改SonarQube配置文件,添加Mysql相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false</span><br><span class="line"># 刚刚创建的sonarQube用户</span><br><span class="line">sonar.jdbc.username=sonar</span><br><span class="line"># 创建用户对应的密码</span><br><span class="line">sonar.jdbc.password=sonar</span><br><span class="line"># 设置编码格式为UTF-8</span><br><span class="line">sonar.sorceEncoding=UTF-8</span><br><span class="line"># sonar登陆用户名</span><br><span class="line">sonar.login=admin</span><br><span class="line"># sonar登陆密码</span><br><span class="line">sonar.password=admin</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-3-重新启动服务端"><a href="#2-3-重新启动服务端" class="headerlink" title="2.3 重新启动服务端"></a>2.3 重新启动服务端</h4><ol><li><p>退出 SonarQube 服务端</p><p>在之前弹出的cmd窗口执行ctrl + c,</p><p>弹出来的提示选择Y,退出SonarQube服务</p></li><li><p>双击StartSonar.bat文件, 重新启动SonarQube</p><p>这次因为要进行数据库的初始化操作,所以需要的时间可能稍微久一点</p></li><li><p>启动成功后,浏览器输入 : <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a> 进入界面</p></li><li><p>登录 </p><p>点击界面右上角的登录按钮, 进行登录 :</p><p>初始的账户名 : admin</p><p>初始的密码  :  admin</p><p>附 : 一些关键配置的修改,如 主机地址,context,端口号等:</p><p>通常情况下使用默认的配置即可!</p><p>文件 /conf/sonar.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#sonar.web.host=0.0.0.0 </span><br><span class="line">#sonar.web.context=</span><br><span class="line">#sonar.web.port=9000</span><br></pre></td></tr></table></figure></li></ol><h3 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h3><h4 id="3-1-安装必要的插件-汉化包举例"><a href="#3-1-安装必要的插件-汉化包举例" class="headerlink" title="3.1. 安装必要的插件 (汉化包举例)"></a>3.1. 安装必要的插件 (汉化包举例)</h4><p>点击 导航栏的 Administration, 选择Marketplace</p><p>搜索 Chinese pack, 点击install进行安装</p><p>安装成功后, 重启 SonarQube !</p><p><img src="https://i.loli.net/2019/07/23/5d3700230c22d72279.png" alt="pack"></p><h4 id="3-2-开始分析项目代码源代码"><a href="#3-2-开始分析项目代码源代码" class="headerlink" title="3.2. 开始分析项目代码源代码"></a>3.2. 开始分析项目代码源代码</h4><p>使用maven的方式进行分析</p><h5 id="3-2-1-编辑maven-的settings-xml文件"><a href="#3-2-1-编辑maven-的settings-xml文件" class="headerlink" title="3.2.1 编辑maven 的settings.xml文件"></a>3.2.1 编辑maven 的settings.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span>http://loaclhost:9000<span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中sonar.host.url 值就是 上文启动的sonar 服务器地址。</p><h5 id="3-2-2-对maven项目进行分析"><a href="#3-2-2-对maven项目进行分析" class="headerlink" title="3.2.2 对maven项目进行分析"></a>3.2.2 对maven项目进行分析</h5><p>到项目所在的文件路径下: </p><p>使用命令提示符或者是power shell执行 如下命令: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar</span><br></pre></td></tr></table></figure><p>出现: BUILD SUCCESS 标识之后</p><p><img src="https://i.loli.net/2019/07/23/5d370208e866016992.png" alt="BUILD SUCCESS"></p><p>刷新界面查看 :</p><p><img src="https://i.loli.net/2019/07/23/5d3702b53d88f89420.png" alt></p><p><img src="https://i.loli.net/2019/07/23/5d370392516ff39969.png" alt></p><h4 id="3-3-配置分析参数"><a href="#3-3-配置分析参数" class="headerlink" title="3.3 配置分析参数"></a>3.3 配置分析参数</h4><p>强制参数：    </p><ol><li>Server<br>sonar.host.url        <a href="http://localhost:9000" target="_blank" rel="noopener">http://localhost:9000</a></li><li>Project Configuration<br>sonar.projectKey              Maven   <groupid>:<artifactid><br>sonar.sources                  Maven 默认的源码路径</artifactid></groupid></li></ol><p>可以配置的参数：</p><ol><li>Project identity<br>sonar.projectName        项目名称<br>sonar.projectversion     项目版本</li><li>Authentication<br>sonar.login                  分析该项目的用户名称<br>sonar.password                分析该项目的用户密码</li></ol><h4 id="3-4-程序员用户使用说明"><a href="#3-4-程序员用户使用说明" class="headerlink" title="3.4. 程序员用户使用说明"></a>3.4. 程序员用户使用说明</h4><p>SonarQube Web管理者通过配置和设置以下参数值对项目源代码进行：</p><p>复杂度、覆盖率、文档、重复、问题、可维护性、可靠性、安全性、大小等约束和规范。</p><p>sonar中的质量阈管理以下内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">复杂度</span><br><span class="line">复杂度</span><br><span class="line">复杂度/类</span><br><span class="line">复杂度/文件</span><br><span class="line">复杂度/方法</span><br><span class="line">覆盖率</span><br><span class="line">分支覆盖</span><br><span class="line">集成测试的新分支覆盖</span><br><span class="line">新代码的分支覆盖率</span><br><span class="line">覆盖率</span><br><span class="line">新集成测试覆盖</span><br><span class="line">新覆盖率</span><br><span class="line">集成测试分支覆盖</span><br><span class="line">集成测试覆盖</span><br><span class="line">集成测试覆盖行</span><br><span class="line">集成测试未覆盖分支</span><br><span class="line">集成测试未覆盖行</span><br><span class="line">代码覆盖率</span><br><span class="line">集成测试的新行覆盖</span><br><span class="line">新代码覆盖率</span><br><span class="line">代码行</span><br><span class="line">集成测试的新行覆盖</span><br><span class="line">覆盖的新代码</span><br><span class="line">总体分支覆盖率</span><br><span class="line">总体新分支覆盖率</span><br><span class="line">总体覆盖率</span><br><span class="line">总体新覆盖率</span><br><span class="line">总体代码覆盖率</span><br><span class="line">总体新代码覆盖率</span><br><span class="line">总体覆盖的新行数</span><br><span class="line">总体未覆盖分支</span><br><span class="line">总体未覆盖的新分支</span><br><span class="line">总体未覆盖代码</span><br><span class="line">总体未覆盖新行数</span><br><span class="line">单元测试忽略数</span><br><span class="line">未覆盖分支</span><br><span class="line">集成测试未覆盖的新分支</span><br><span class="line">未覆盖新分支</span><br><span class="line">未覆盖的代码</span><br><span class="line">集成测试未覆盖的行</span><br><span class="line">未覆盖的新代码</span><br><span class="line">单元测试持续时间</span><br><span class="line">单元测试错误数</span><br><span class="line">单元测试失败数</span><br><span class="line">单元测试成功 (%)</span><br><span class="line">单元测试数</span><br><span class="line">文档</span><br><span class="line">注释行</span><br><span class="line">注释 (%)</span><br><span class="line">公共API</span><br><span class="line">公共注释的API (%)</span><br><span class="line">公共未注释的API</span><br><span class="line">重复</span><br><span class="line">重复块</span><br><span class="line">重复文件</span><br><span class="line">重复行</span><br><span class="line">重复行(%)</span><br><span class="line">问题</span><br><span class="line">阻断违规</span><br><span class="line">确认问题</span><br><span class="line">严重违规</span><br><span class="line">误判问题</span><br><span class="line">提示违规</span><br><span class="line">违规</span><br><span class="line">主要违规</span><br><span class="line">次要违规</span><br><span class="line">新阻断违规</span><br><span class="line">新严重违规</span><br><span class="line">新提示违规</span><br><span class="line">新违规</span><br><span class="line">新主要违规</span><br><span class="line">新次要违规</span><br><span class="line">开启问题</span><br><span class="line">重开问题</span><br><span class="line">不修复的问题</span><br><span class="line">可维护性</span><br><span class="line">新代码的技术债务</span><br><span class="line">坏味道</span><br><span class="line">达到可维护性A级所需的工作</span><br><span class="line">新增坏味道</span><br><span class="line">技术债务</span><br><span class="line">技术债务比率</span><br><span class="line">新代码技术债务比率</span><br><span class="line">Management</span><br><span class="line">Burned budget</span><br><span class="line">Business value</span><br><span class="line">Team size</span><br><span class="line">可靠性</span><br><span class="line">Bugs</span><br><span class="line">新增Bugs</span><br><span class="line">可靠性修复工作</span><br><span class="line">新代码的可靠性修复工作</span><br><span class="line">安全性</span><br><span class="line">新增漏洞</span><br><span class="line">安全修复工作</span><br><span class="line">新代码的安全修复工作</span><br><span class="line">漏洞</span><br><span class="line">大小</span><br><span class="line">类</span><br><span class="line">目录</span><br><span class="line">文件</span><br><span class="line">方法</span><br><span class="line">生成的行数</span><br><span class="line">生成的代码行数</span><br><span class="line">行数</span><br><span class="line">代码行数</span><br><span class="line">项目</span><br><span class="line">语句</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工欲善其事必先利其器&quot;&gt;&lt;a href=&quot;#工欲善其事必先利其器&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事必先利其器&quot;&gt;&lt;/a&gt;工欲善其事必先利其器&lt;/h2&gt;&lt;h3 id=&quot;一-SonarQube代码质量检查工具简介&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Sonar" scheme="http://blog.alterem.top/categories/Sonar/"/>
    
      <category term="SonarQube" scheme="http://blog.alterem.top/categories/Sonar/SonarQube/"/>
    
    
      <category term="SonarQube" scheme="http://blog.alterem.top/tags/SonarQube/"/>
    
      <category term="Sonar" scheme="http://blog.alterem.top/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>教程|教你如何给你的头像添加一个好看的国旗</title>
    <link href="http://blog.alterem.top/2019/09/24/%E6%95%99%E7%A8%8B-%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E5%A4%B4%E5%83%8F%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9C%8B%E7%9A%84%E5%9B%BD%E6%97%97/"/>
    <id>http://blog.alterem.top/2019/09/24/教程-教你如何给你的头像添加一个好看的国旗/</id>
    <published>2019-09-24T10:10:31.000Z</published>
    <updated>2019-09-24T10:36:29.800Z</updated>
    
    <content type="html"><![CDATA[<p>今天朋友圈又火了，听说原因是 <strong>@腾讯官网</strong> 就能得到一顶绿色的帽子，啊呸，是一个好看的国庆节头像，可是听说没一会就502了，那么我们自己动手实现一个吧</p><p>由于代码比较简单就不一一介绍了。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cvs = <span class="built_in">document</span>.getElementById(<span class="string">"cvs"</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = cvs.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="keyword">var</span> exportImage = <span class="built_in">document</span>.getElementById(<span class="string">"export"</span>);</span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>);</span><br><span class="line"><span class="keyword">var</span> hat = <span class="string">"hat6"</span>;</span><br><span class="line"><span class="keyword">var</span> canvasFabric;</span><br><span class="line"><span class="keyword">var</span> hatInstance;</span><br><span class="line"><span class="keyword">var</span> screenWidth = <span class="built_in">window</span>.screen.width &lt; <span class="number">500</span> ? <span class="built_in">window</span>.screen.width : <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">viewer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"upload"</span>).files[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(file);</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader;</span><br><span class="line"><span class="keyword">if</span> (file) &#123;</span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">img.src = reader.result;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">img2Cvs(img)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">img.src = <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">img2Cvs</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">cvs.width = img.width;</span><br><span class="line">cvs.height = img.height;</span><br><span class="line">cvs.style.display = <span class="string">"block"</span>;</span><br><span class="line">canvasFabric = <span class="keyword">new</span> fabric.Canvas(<span class="string">"cvs"</span>, &#123;</span><br><span class="line">width: screenWidth,</span><br><span class="line">height: screenWidth,</span><br><span class="line">backgroundImage: <span class="keyword">new</span> fabric.Image(img, &#123;</span><br><span class="line">scaleX: screenWidth / img.width,</span><br><span class="line">scaleY: screenWidth / img.height</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">changeHat();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"uploadContainer"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"uploadText"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"upload"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"change"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"exportBtn"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"tip"</span>).style.opacity = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeHat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementById(hat).style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="keyword">var</span> hats = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"hide"</span>);</span><br><span class="line">hat = <span class="string">"hat"</span> + (+hat.replace(<span class="string">"hat"</span>, <span class="string">""</span>) + <span class="number">1</span>) % hats.length;</span><br><span class="line"><span class="keyword">var</span> hatImage = <span class="built_in">document</span>.getElementById(hat);</span><br><span class="line">hatImage.style.display = <span class="string">"block"</span>;</span><br><span class="line"><span class="keyword">if</span> (hatInstance) &#123;</span><br><span class="line">canvasFabric.remove(hatInstance)</span><br><span class="line">&#125;</span><br><span class="line">hatInstance = <span class="keyword">new</span> fabric.Image(hatImage, &#123;</span><br><span class="line">top: <span class="number">40</span>,</span><br><span class="line">left: screenWidth / <span class="number">3</span>,</span><br><span class="line">scaleX: <span class="number">100</span> / hatImage.width,</span><br><span class="line">scaleY: <span class="number">100</span> / hatImage.height,</span><br><span class="line">cornerColor: <span class="string">"#0b3a42"</span>,</span><br><span class="line">cornerStrokeColor: <span class="string">"#fff"</span>,</span><br><span class="line">cornerStyle: <span class="string">"circle"</span>,</span><br><span class="line">transparentCorners: <span class="literal">false</span>,</span><br><span class="line">rotatingPointOffset: <span class="number">30</span></span><br><span class="line">&#125;);</span><br><span class="line">hatInstance.setControlVisible(<span class="string">"bl"</span>, <span class="literal">false</span>);</span><br><span class="line">hatInstance.setControlVisible(<span class="string">"tr"</span>, <span class="literal">false</span>);</span><br><span class="line">hatInstance.setControlVisible(<span class="string">"tl"</span>, <span class="literal">false</span>);</span><br><span class="line">hatInstance.setControlVisible(<span class="string">"mr"</span>, <span class="literal">false</span>);</span><br><span class="line">hatInstance.setControlVisible(<span class="string">"mt"</span>, <span class="literal">false</span>);</span><br><span class="line">canvasFabric.add(hatInstance)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"canvas-container"</span>)[<span class="number">0</span>].style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"exportBtn"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"tip"</span>).innerHTML = <span class="string">"长按图片保存或分享"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"change"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">cvs.style.display = <span class="string">"none"</span>;</span><br><span class="line">exportImage.style.display = <span class="string">"block"</span>;</span><br><span class="line">exportImage.src = canvasFabric.toDataURL(&#123;</span><br><span class="line">width: screenWidth,</span><br><span class="line">height: screenWidth</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后效果</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7aq8cqzkwj31tg0roqgn.jpg" alt="image-20190924171759373"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7aq8lyf16j30t80lgqc8.jpg" alt="image-20190924171817825"></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7aq91hdlij315m0kearn.jpg" alt="image-20190924171842699">拖动图片可见已经拼合成一张完整图片了</p><p>右键查看源代码</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g7aqa1zqbxj31jm0c0gr9.jpg" alt="image-20190924171947774"></p><p>源码地址：<a href="https://gitee.com/alterem/avatar.git" target="_blank" rel="noopener">https://gitee.com/alterem/avatar.git</a></p><p>演示地址：<a href="http://alterem.gitee.io/avatar/" target="_blank" rel="noopener">http://alterem.gitee.io/avatar/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天朋友圈又火了，听说原因是 &lt;strong&gt;@腾讯官网&lt;/strong&gt; 就能得到一顶绿色的帽子，啊呸，是一个好看的国庆节头像，可是听说没一会就502了，那么我们自己动手实现一个吧&lt;/p&gt;
&lt;p&gt;由于代码比较简单就不一一介绍了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://blog.alterem.top/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://blog.alterem.top/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>在SpringMVC项目中使用HIkariCP</title>
    <link href="http://blog.alterem.top/2019/06/24/%E5%9C%A8SpringMVC%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8HIkariCP/"/>
    <id>http://blog.alterem.top/2019/06/24/在SpringMVC项目中使用HIkariCP/</id>
    <published>2019-06-24T09:42:16.000Z</published>
    <updated>2019-06-24T09:45:20.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是HIkariCP"><a href="#什么是HIkariCP" class="headerlink" title="什么是HIkariCP"></a>什么是HIkariCP</h4><blockquote><p><a href="https://www.jianshu.com/p/15b846107a7c" target="_blank" rel="noopener">https://www.jianshu.com/p/15b846107a7c</a></p></blockquote><h4 id="使用HikariCP数据源"><a href="#使用HikariCP数据源" class="headerlink" title="使用HikariCP数据源"></a>使用HikariCP数据源</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="Spring-mvc-xml"><a href="#Spring-mvc-xml" class="headerlink" title="Spring-mvc.xml"></a>Spring-mvc.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.zaxxer.hikari.HikariDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"shutdown"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTestQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 1"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生效超时 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationTimeout"</span> <span class="attr">value</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接只读数据库时配置为true， 保证安全 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionTimeout"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleTimeout"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL</span></span><br><span class="line"><span class="comment">            wait_timeout参数（show variables like '%timeout%';） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxLifetime"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maximumPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动成功日志"><a href="#启动成功日志" class="headerlink" title="启动成功日志"></a>启动成功日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">17:36:50.838 [main] WARN  com.zaxxer.hikari.HikariConfig - HikariPool-1 - idleTimeout has been <span class="built_in">set</span> but has no effect because the pool is operating as a fixed size pool.</span><br><span class="line">17:36:50.838 [main] DEBUG com.zaxxer.hikari.HikariConfig - HikariPool-1 - configuration:</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - allowPoolSuspension.............false</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - autoCommit......................true</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - catalog.........................none</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionInitSql...............none</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionTestQuery.............<span class="string">"SELECT 1"</span></span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - connectionTimeout...............60000</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSource......................none</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceClassName.............none</span><br><span class="line">17:36:50.841 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceJNDI..................none</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - dataSourceProperties............&#123;password=&lt;masked&gt;&#125;</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - driverClassName.................<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckProperties...........&#123;&#125;</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - healthCheckRegistry.............none</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - idleTimeout.....................60000</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - initializationFailTimeout.......1</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - isolateInternalQueries..........false</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - jdbcUrl.........................jdbc:mysql://ykx.uerp.net:3306/ykx?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - leakDetectionThreshold..........0</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - maxLifetime.....................60000</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - maximumPoolSize.................10</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - metricRegistry..................none</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - metricsTrackerFactory...........none</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - minimumIdle.....................10</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - password........................&lt;masked&gt;</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - poolName........................<span class="string">"HikariPool-1"</span></span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - readOnly........................false</span><br><span class="line">17:36:50.843 [main] DEBUG com.zaxxer.hikari.HikariConfig - registerMbeans..................false</span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - scheduledExecutor...............none</span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - schema..........................none</span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - threadFactory...................internal</span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - transactionIsolation............default</span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - username........................<span class="string">"ykx"</span></span><br><span class="line">17:36:50.844 [main] DEBUG com.zaxxer.hikari.HikariConfig - validationTimeout...............3000</span><br><span class="line">17:36:50.844 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...</span><br><span class="line">17:36:51.257 [main] DEBUG com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.jdbc.JDBC4Connection@1d77a31d</span><br><span class="line">17:36:51.260 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是HIkariCP&quot;&gt;&lt;a href=&quot;#什么是HIkariCP&quot; class=&quot;headerlink&quot; title=&quot;什么是HIkariCP&quot;&gt;&lt;/a&gt;什么是HIkariCP&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/15b846107a7c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/15b846107a7c&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;使用HikariCP数据源&quot;&gt;&lt;a href=&quot;#使用HikariCP数据源&quot; class=&quot;headerlink&quot; title=&quot;使用HikariCP数据源&quot;&gt;&lt;/a&gt;使用HikariCP数据源&lt;/h4&gt;&lt;h5 id=&quot;pom-xml&quot;&gt;&lt;a href=&quot;#pom-xml&quot; class=&quot;headerlink&quot; title=&quot;pom.xml&quot;&gt;&lt;/a&gt;pom.xml&lt;/h5&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.zaxxer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;HikariCP&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.3.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HIkariCP" scheme="http://blog.alterem.top/categories/HIkariCP/"/>
    
      <category term="dataSource" scheme="http://blog.alterem.top/categories/HIkariCP/dataSource/"/>
    
    
      <category term="HIkariCP" scheme="http://blog.alterem.top/tags/HIkariCP/"/>
    
      <category term="dataSource" scheme="http://blog.alterem.top/tags/dataSource/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis在Spring环境下的事务管理</title>
    <link href="http://blog.alterem.top/2019/06/13/MyBatis%E5%9C%A8Spring%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://blog.alterem.top/2019/06/13/MyBatis在Spring环境下的事务管理/</id>
    <published>2019-06-13T05:23:05.000Z</published>
    <updated>2019-06-13T05:31:12.821Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis的设计思想很简单，可以看做是对JDBC的一次封装，并提供强大的动态SQL映射功能。但是由于它本身也有一些缓存、事务管理等功能，所以实际使用中还是会碰到一些问题——另外，最近接触了JFinal，其思想和Hibernate类似，但要更简洁，和MyBatis的设计思想不同，但有一点相同：都是想通过简洁的设计最大限度地简化开发和提升性能——说到性能，前段时间碰到两个问题： </p><ol><li>在一个上层方法（DAO方法的上层）内删除一条记录，然后再插入一条相同<strong>主键</strong>的记录时，会报主键冲突的错误。     </li><li>某些项目中的DAO方法平均执行时间会是其他一些项目中的 <strong>2倍</strong> 。     </li></ol><p>第一个问题是偶尔会出现，在实验环境无论如何也重现不了，经过分析MyBatis的逻辑，估计是两个DAO分别拿到了两个不同的Connection，第二个语句比第一个更早的被提交，导致了主键冲突，有待进一步的分析和验证。对于第二个问题，本文将尝试通过分析源代码和实验找到它的root cause，主要涉及到以下内容： </p><ol><li><p>问题描述与分析     </p></li><li><p>MyBatis在Spring环境下的载入过程     </p></li><li><p>MyBatis在Spring环境下事务的管理     </p></li><li><p>实验验证     </p></li></ol><a id="more"></a><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><p>整个系统是微服务架构，这里讨论的「项目」是指一个单独的服务。单个项目的框架基本是Spring+MyBatis，具体版本如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring <span class="number">3.2</span>.9/<span class="number">4.3</span>.5 + Mybatis <span class="number">3.2</span>.6 + mybatis-spring <span class="number">1.2</span>.2 + mysql connector <span class="number">5.1</span>.20 + commons-dbcp <span class="number">1.4</span></span><br></pre></td></tr></table></figure><p>与MyBatis和事务相关的配置如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line">&lt;!-- bean#1--&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"dataSource"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">        destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">        &lt;!-- 一些数据库信息配置--&gt;</span><br><span class="line">        &lt;!-- 一些DBCP连接池配置 --&gt;</span><br><span class="line">         <span class="comment">//在这里设置是否自动提交</span></span><br><span class="line">        &lt;property name=<span class="string">"defaultAutoCommit"</span> value=<span class="string">"$&#123;dbcp.defaultAutoCommit&#125;"</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">&lt;!-- bean#2--&gt;</span><br><span class="line">  &lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"mapperLocations"</span> value=<span class="string">"classpath*:path/to/mapper/**/*.xml"</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">&lt;!-- bean#3 --&gt;</span><br><span class="line">  &lt;bean id=<span class="string">"transactionManager"</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line">&lt;!-- bean#4--&gt;</span><br><span class="line">  &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"basePackage"</span> value=<span class="string">".path.to.mapper"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"sqlSessionFactoryBeanName"</span> value=<span class="string">"sqlSessionFactory"</span>/&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"> &lt;!-- bean5 --&gt;</span><br><span class="line">  &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="问题描述与分析"><a href="#问题描述与分析" class="headerlink" title="问题描述与分析"></a>问题描述与分析</h3><p>一倍的时间差挺严重的，平均到每次调用，正常的大约在6到10几     <code>ms</code>，慢的要近20     <code>ms</code>，由于调用次数很多，导致整体性能会有很大的差别。经过仔细比对这几个项目，发现DAO执行慢的项目的数据源配置（bean#1）中<code>defaultAutoCommit</code>的配置都是<code>false</code>。而且将此配置改为 <code>true</code>之后就恢复了正常。 </p><p>由此推断是在MyBatis在执行「非自动提交」语句时，进行等待，或者多提交了一次，导致实际调用数据库API次数增多。但是这个推断也有个问题，由于整个项目是在Spring环境中运行的，而且也开启了Spring的事务管理，所以还是需要详细的看一下MyBatis到底是如何装配DAO方法与管理事务的，才能彻底解开谜团。 </p><h3 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h3><p>首先写一个Service，其中调用了同一个mapper类的两个方法分别2次，<code>insertModelList()</code>会在数据库中插入两条记录，<code>delModels()</code>方法会删除这两条记录，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="comment">//@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Model&gt; models= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//省略一些数据工作。。。</span></span><br><span class="line">    modelMapper.insertModelList(<span class="number">50001l</span>, models);</span><br><span class="line">    modelMapper.delModels(<span class="number">50001</span>);</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(models))</span><br><span class="line">        modelMapper.insertModelList(<span class="number">50001</span>, models);</span><br><span class="line">    modelMapper.delModels(<span class="number">50001</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOther</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"加载类："</span>);</span><br><span class="line">    System.out.println(modelMapper.getClass().getClassLoader());</span><br><span class="line">    modelMapper.delModels(<span class="number">50001</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际项目中使用cat来进行执行时间的统计，这里也仿照cat，使用一个单独的AOP类实现时间的计算： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码3</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoTimeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> time = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">calcTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> then = System.nanoTime();</span><br><span class="line">    Object object = joinPoint.proceed();</span><br><span class="line">    <span class="keyword">long</span> now = System.nanoTime();</span><br><span class="line">    setTime(getTime() + (now-then));</span><br><span class="line">    setNum(getNum() + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略getter &amp; setter。。。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"总共次数："</span> + num);</span><br><span class="line">    System.out.println(<span class="string">"总共时间："</span> + time);</span><br><span class="line">    System.out.println(<span class="string">"平均时间："</span> + time / num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码4</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss]"</span>).format(<span class="keyword">new</span> Date())</span><br><span class="line">            + <span class="string">" 开始测试!"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TEST_NUM; i++) &#123;</span><br><span class="line">        ItemStrategyServiceTest ist = (ItemStrategyServiceTest) context.getBean(<span class="string">"isTS"</span>);</span><br><span class="line">        ist.testIS();</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"1000次"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DaoTimeAdvice ad = (DaoTimeAdvice) context.getBean(<span class="string">"daoTimeAdvice"</span>);</span><br><span class="line">    ad.printInfo();</span><br><span class="line">    ItemStrategyServiceTest ist = (ItemStrategyServiceTest) context.getBean(<span class="string">"isTS"</span>);</span><br><span class="line">    ist.testOther();</span><br><span class="line">    System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果： </p><table><thead><tr><th><code>defaultAutoCommit</code></th><th>循环次数</th><th>共消耗时间(ns)</th><th>平均时间(ns)</th></tr></thead><tbody><tr><td>true</td><td>40000</td><td>17831088316</td><td>445777</td></tr><tr><td>true</td><td>40000</td><td>17881589992</td><td>447039</td></tr><tr><td>false</td><td>40000</td><td>27280458229</td><td>682011</td></tr><tr><td>false</td><td>40000</td><td>27237413893</td><td>680935</td></tr></tbody></table><p>defaultAutoCommit为<code>false</code>时的执行时间是<code>true</code>的近1.5倍，并没有重现2倍的时间消耗，估计是在cat统计或者其他AOP方法的执行时还有其他消耗，从而扩大了<code>false</code>和<code>true</code>之间的区别。 </p><h3 id="MyBatis在Spring环境下的载入过程"><a href="#MyBatis在Spring环境下的载入过程" class="headerlink" title="MyBatis在Spring环境下的载入过程"></a>MyBatis在Spring环境下的载入过程</h3><p>按照第一节中的配置文件，整个MyBatis中DAO的bean的装配应该是这样的： </p><ol><li><p>先使用BasicDataSource装配一个数据源的bean（bean#1），名字叫做<code>dataSource</code>。         </p><p>这个bean很简单，就是实例化并注册到Spring的上下文中。         </p></li><li><p>使用<code>dataSource</code>来创建<code>sqlSessionFactory</code>（bean#2)，这个bean创建时会扫描MyBatis的语句映射文件并解析。         </p><p>在MyBatis中，真正的数据库读写操作是通过SqlSession的实例来实现的，而SqlSession要通过SQLSessionFactory来管理。这里的 <code>org.mybatis.spring.SqlSessionFactoryBean</code>实现了FactoryBean类（这个类比较特殊，与主题无关，这里不再赘述），Spring会从这个bean中会获取真正的SQLSessionFactory的实例，源代码中显示，实际返回的对象是DefaultSqlSessionFactory的实例。         </p></li><li><p>使用<code>sqlSessionFactory</code>这个工厂类来创建mapper扫描器（bean#4），并创建含有DAO方法的实例。         </p><p>为了让上层方法可以通过普通的方法调用来使用DAO方法，需要往Spring上下文里注册相应的bean，而在MyBatis的普通使用场景中是没有mapper的实现类的（具体的SQL语句映射通过注解或者XML文件来实现），只有接口，在MyBatis中这些接口是通过动态代理实现的。这里使用的类是 <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code>，它实现了<code>org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor</code>接口，所以会在Spring中「所有的bean定义全部注册完成，但还没有实例化」之前，调用方法向Spring上下文注册mapper实现类（动态代理的对象）。具体代码如下：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//代码5</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class="line">     processPropertyPlaceHolders();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ClassPathMapperScanner scanner = <span class="keyword">new</span> ClassPathMapperScanner(registry);</span><br><span class="line">   <span class="comment">//设置一些属性</span></span><br><span class="line"></span><br><span class="line">   scanner.scan(StringUtils.tokenizeToStringArray(<span class="keyword">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Perform a scan within the specified base packages.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> basePackages the packages to check for annotated classes</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> number of beans registered</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> beanCountAtScanStart = <span class="keyword">this</span>.registry.getBeanDefinitionCount();</span><br><span class="line"></span><br><span class="line">   doScan(basePackages);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.includeAnnotationConfig) &#123;</span><br><span class="line">     AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (<span class="keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在源代码里可以看到，真正的mapper实现类是<code>org.mybatis.spring.mapper.MapperFactoryBean&lt;Object&gt;</code>，具体的逻辑在方法<code>org.mybatis.spring.mapper.ClassPathMapperScanner.processBeanDefinitions(Set&lt;BeanDefinitionHolder&gt;)</code>里。最后，每一个方法的执行，最终落入了             <code>org.mybatis.spring.SqlSessionTemplate</code>的某个方法中，并被如下这个拦截器拦截：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码6</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Proxy needed to route MyBatis method calls to the proper SqlSession got</span></span><br><span class="line"><span class="comment">   * from Spring's Transaction Manager</span></span><br><span class="line"><span class="comment">   * It also unwraps exceptions thrown by &#123;<span class="doctag">@code</span> Method#invoke(Object, Object...)&#125; to</span></span><br><span class="line"><span class="comment">   * pass a &#123;<span class="doctag">@code</span> PersistenceException&#125; to the &#123;<span class="doctag">@code</span> PersistenceExceptionTranslator&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  SqlSession sqlSession = getSqlSession(</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory,</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.executorType,</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Object result = method.invoke(sqlSession, args);</span><br><span class="line">    <span class="keyword">if</span> (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory)) &#123;</span><br><span class="line">      <span class="comment">// force commit even on non-dirty sessions because some databases require</span></span><br><span class="line">      <span class="comment">// a commit/rollback before calling close()</span></span><br><span class="line">      sqlSession.commit(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="comment">//省略一些错误处理</span></span><br><span class="line">    <span class="keyword">throw</span> unwrapped;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">      closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MyBatis在Spring环境下事务的管理         </p><p>从源代码中知道真正的SqlSessionFactory使用的是<code>org.apache.ibatis.session.defaults.DefaultSqlSessionFactory</code>的实例，同时，事务管理使用     <code>org.mybatis.spring.transaction.SpringManagedTransactionFactory</code>。但是在代码1的配置中，还添加了Spring事务管理的配置，就是在某个Service方法（或某个其他可被扫描到的方法）上加上<code>@Transactional</code>注解，那么Spring的事务管理会自动创建事务，那么它和MyBatis的事务之间是怎么协作的呢？         </p><p>可以看到在代码6中的方法<code>isSqlSessionTransactional()</code>，它会返回上层代码中是否有Spring的事务，如果有，将不会执行下边的<code>commit()</code>。在我的项目中的实际情况是没有Spring事务，所以肯定是走到了下面的<code>commit()</code>，这个方法最终落到了<code>SpringManagedTransactionFactory</code>中的<code>commit()</code>，看代码：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码7</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.connection = DataSourceUtils.getConnection(<span class="keyword">this</span>.dataSource);</span><br><span class="line">  <span class="keyword">this</span>.autoCommit = <span class="keyword">this</span>.connection.getAutoCommit();</span><br><span class="line">  <span class="keyword">this</span>.isConnectionTransactional = DataSourceUtils.isConnectionTransactional(<span class="keyword">this</span>.connection, <span class="keyword">this</span>.dataSource);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.connection != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.isConnectionTransactional &amp;&amp; !<span class="keyword">this</span>.autoCommit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Committing JDBC Connection ["</span> + <span class="keyword">this</span>.connection + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.connection.commit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，此处是否要执行<code>commit()</code>操作是由3个变量决定的，如果DataSource的 <code>autoCommit</code>是 <code>false</code>，则其结果一定为 <code>true</code>，控制台也会看到一行日志：<code>Committing JDBC Connection [xxxxxx]</code>，刚好与项目中遇到的情况相同。这个提交动作是需要和数据库交互的，比较耗时。         </p></li></ol><h3 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h3><p>由上一节分析得出，造成DAO方法执行时间变长的原因是会多执行一次提交，那么如果上层方法被Spring事务管理器托管（或者数据源的     <code>defaultAutoCommit</code>为     <code>true</code>，这个条件已经在刚开始的问题重现被验证），则不会执行MyBatis的提交动作，DAO方法应该相应的执行时间会变短。于是将Service方法加上     <code>@transactional</code>注解，分别测试     <code>true</code>和     <code>false</code>的情况。结果： </p><table><thead><tr><th style="text-align:left">defaultCommit</th><th style="text-align:left">循环次数</th><th style="text-align:left">共消耗时间</th><th style="text-align:left">平均时间</th></tr></thead><tbody><tr><td style="text-align:left">true</td><td style="text-align:left">40000</td><td style="text-align:left">7017113852</td><td style="text-align:left">175427</td></tr><tr><td style="text-align:left">false</td><td style="text-align:left">40000</td><td style="text-align:left">7283591630</td><td style="text-align:left">182089</td></tr></tbody></table><p>可以看到执行的时间已经基本接近，由此基本可以确定是这个原因造成的。这里仍然有几个疑点，尤其是问题重现时没有出现2倍的时间消耗，如果你有别的想法，也欢迎提出来讨论。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis的设计思想很简单，可以看做是对JDBC的一次封装，并提供强大的动态SQL映射功能。但是由于它本身也有一些缓存、事务管理等功能，所以实际使用中还是会碰到一些问题——另外，最近接触了JFinal，其思想和Hibernate类似，但要更简洁，和MyBatis的设计思想不同，但有一点相同：都是想通过简洁的设计最大限度地简化开发和提升性能——说到性能，前段时间碰到两个问题： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个上层方法（DAO方法的上层）内删除一条记录，然后再插入一条相同&lt;strong&gt;主键&lt;/strong&gt;的记录时，会报主键冲突的错误。     &lt;/li&gt;
&lt;li&gt;某些项目中的DAO方法平均执行时间会是其他一些项目中的 &lt;strong&gt;2倍&lt;/strong&gt; 。     &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一个问题是偶尔会出现，在实验环境无论如何也重现不了，经过分析MyBatis的逻辑，估计是两个DAO分别拿到了两个不同的Connection，第二个语句比第一个更早的被提交，导致了主键冲突，有待进一步的分析和验证。对于第二个问题，本文将尝试通过分析源代码和实验找到它的root cause，主要涉及到以下内容： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;问题描述与分析     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyBatis在Spring环境下的载入过程     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyBatis在Spring环境下事务的管理     &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实验验证     &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://blog.alterem.top/categories/MyBatis/"/>
    
      <category term="Spring" scheme="http://blog.alterem.top/categories/MyBatis/Spring/"/>
    
    
      <category term="MyBatis" scheme="http://blog.alterem.top/tags/MyBatis/"/>
    
      <category term="Spring" scheme="http://blog.alterem.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>CAS4.0分布式部署以及使用Redis缓存共享ticket</title>
    <link href="http://blog.alterem.top/2019/06/12/CAS4-0%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8Redis%E7%BC%93%E5%AD%98%E5%85%B1%E4%BA%ABticket/"/>
    <id>http://blog.alterem.top/2019/06/12/CAS4-0分布式部署以及使用Redis缓存共享ticket/</id>
    <published>2019-06-12T14:14:30.000Z</published>
    <updated>2019-07-04T11:57:39.759Z</updated>
    
    <content type="html"><![CDATA[<p>CAS4.0分布式部署以及使用Redis缓存共享ticket </p><p>当业务不断拓展，系统用户在不断增加时，我们的平台统一登录认证服务无法承受当前压力。此时，我们需要分布式部署我们的统一登录认证服务。 </p><p>CAS的分布式部署，除了注意session共享，通过nginx或者apache反向代理外，还需要注意票据ticket的存储共享。 在ticketRegistry.xml文件中，配置ticket相关的信息。</p><a id="more"></a><p>主要配置：1.注册ticket存储，2.定时清除过期ticket。 </p><p>由于我们使用的Redis缓存Key设置了过期时间，因此可以注释掉清除过期ticket的定时器及相关类。</p><p>编写新的ticket存储类需要继承类AbstractDistributedTicketRegistry。代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cas.ticket;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.util.Collection;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.jasig.cas.ticket.Ticket;  </span><br><span class="line"><span class="keyword">import</span> org.jasig.cas.ticket.TicketGrantingTicket;  </span><br><span class="line"><span class="keyword">import</span> org.jasig.cas.ticket.registry.AbstractDistributedTicketRegistry;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> cn.net.xinyi.util.SysPropertiesUtil;  </span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;  </span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;  </span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 使用Redis存储Ticket </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> XIVA </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTicketRegistry</span> <span class="keyword">extends</span> <span class="title">AbstractDistributedTicketRegistry</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> redisDatabaseNum;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String hosts;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> port;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> connTimeout;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String redisPassword;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * ST最大空闲时间 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> st_time;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * TGT最大空闲时间 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tgt_time;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool cachePool;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        redisDatabaseNum = SysPropertiesUtil.getPropertyInt(<span class="string">"redis_database_num"</span>);  </span><br><span class="line">  </span><br><span class="line">        hosts = SysPropertiesUtil.getProperty(<span class="string">"redis_hosts"</span>);  </span><br><span class="line">          </span><br><span class="line">        port = SysPropertiesUtil.getPropertyInt(<span class="string">"redis_port"</span>);  </span><br><span class="line">  </span><br><span class="line">        connTimeout = SysPropertiesUtil.getPropertyInt(<span class="string">"redis_conn_timeout"</span>);  </span><br><span class="line">          </span><br><span class="line">        redisPassword = SysPropertiesUtil.getProperty(<span class="string">"redis_password"</span>);  </span><br><span class="line">  </span><br><span class="line">        st_time = SysPropertiesUtil.getPropertyInt(<span class="string">"st_time"</span>);  </span><br><span class="line">  </span><br><span class="line">        tgt_time = SysPropertiesUtil.getPropertyInt(<span class="string">"tgt_time"</span>);  </span><br><span class="line">  </span><br><span class="line">        cachePool = <span class="keyword">new</span> JedisPool(<span class="keyword">new</span> JedisPoolConfig(), hosts, port, connTimeout, redisPassword);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTicket</span><span class="params">(Ticket ticket)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        Jedis jedis = cachePool.getResource();  </span><br><span class="line">  </span><br><span class="line">        jedis.select(redisDatabaseNum);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">int</span> seconds = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">        String key = ticket.getId();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (ticket <span class="keyword">instanceof</span> TicketGrantingTicket)  </span><br><span class="line">        &#123;  </span><br><span class="line">            seconds = tgt_time / <span class="number">1000</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            seconds = st_time / <span class="number">1000</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();  </span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">  </span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);  </span><br><span class="line">  </span><br><span class="line">            oos.writeObject(ticket);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (Exception e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            logger.error(<span class="string">"adding ticket to redis error."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">finally</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">try</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != oos)  </span><br><span class="line">                    oos.close();  </span><br><span class="line">  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (Exception e)  </span><br><span class="line">            &#123;  </span><br><span class="line">                logger.error(<span class="string">"oos closing error when adding ticket to redis."</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        jedis.set(key.getBytes(), bos.toByteArray());  </span><br><span class="line">        jedis.expire(key.getBytes(), seconds);  </span><br><span class="line">        jedis.close();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTicket</span><span class="params">(String ticketId)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (ticketId == <span class="keyword">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        Jedis jedis = cachePool.getResource();  </span><br><span class="line">        jedis.select(redisDatabaseNum);  </span><br><span class="line">          </span><br><span class="line">        jedis.del(ticketId.getBytes());  </span><br><span class="line">        jedis.close();  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ticket <span class="title">getTicket</span><span class="params">(String ticketId)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> getProxiedTicketInstance(getRawTicket(ticketId));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Ticket <span class="title">getRawTicket</span><span class="params">(<span class="keyword">final</span> String ticketId)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == ticketId)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        Jedis jedis = cachePool.getResource();  </span><br><span class="line">        jedis.select(redisDatabaseNum);  </span><br><span class="line">        Ticket ticket = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = jedis.get(ticketId.getBytes());  </span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length &lt; <span class="number">1</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(bytes);  </span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bais);  </span><br><span class="line">            ticket = (Ticket) ois.readObject();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (Exception e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            logger.error(<span class="string">"getting ticket to redis error."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">finally</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">try</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != ois)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    ois.close();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (Exception e)  </span><br><span class="line">            &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">                logger.error(<span class="string">"ois closing error when getting ticket to redis."</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        jedis.close();  </span><br><span class="line">        <span class="keyword">return</span> ticket;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Ticket&gt; <span class="title">getTickets</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"GetTickets not supported."</span>);    </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needsCallback</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">updateTicket</span><span class="params">(Ticket ticket)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.addTicket(ticket);    </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变更后的ticketRegistry.xml代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    Licensed to Jasig under one or more contributor license  </span></span><br><span class="line"><span class="comment">    agreements. See the NOTICE file distributed with this work  </span></span><br><span class="line"><span class="comment">    for additional information regarding copyright ownership.  </span></span><br><span class="line"><span class="comment">    Jasig licenses this file to you under the Apache License,  </span></span><br><span class="line"><span class="comment">    Version 2.0 (the "License"); you may not use this file  </span></span><br><span class="line"><span class="comment">    except in compliance with the License.  You may obtain a  </span></span><br><span class="line"><span class="comment">    copy of the License at the following location:  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    Unless required by applicable law or agreed to in writing,  </span></span><br><span class="line"><span class="comment">    software distributed under the License is distributed on an  </span></span><br><span class="line"><span class="comment">    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  </span></span><br><span class="line"><span class="comment">    KIND, either express or implied.  See the License for the  </span></span><br><span class="line"><span class="comment">    specific language governing permissions and limitations  </span></span><br><span class="line"><span class="comment">    under the License.  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>  </span><br><span class="line">        Configuration for the default TicketRegistry which stores the tickets in-memory and cleans them out as specified intervals.  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">         </span><br><span class="line">  <span class="comment">&lt;!-- Ticket Registry   </span></span><br><span class="line"><span class="comment">  &lt;bean id="ticketRegistry" class="org.jasig.cas.ticket.registry.DefaultTicketRegistry" /&gt;  </span></span><br><span class="line"><span class="comment">  --&gt;</span>  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- ticket store on redis db  --&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ticketRegistry"</span> <span class="attr">class</span>=<span class="string">"cas.ticket.RedisTicketRegistry"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--Quartz --&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- TICKET REGISTRY CLEANER   </span></span><br><span class="line"><span class="comment">    &lt;bean id="ticketRegistryCleaner" class="org.jasig.cas.ticket.registry.support.DefaultTicketRegistryCleaner"  </span></span><br><span class="line"><span class="comment">        p:ticketRegistry-ref="ticketRegistry"  </span></span><br><span class="line"><span class="comment">        p:logoutManager-ref="logoutManager" /&gt;  </span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">    &lt;bean id="jobDetailTicketRegistryCleaner" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"  </span></span><br><span class="line"><span class="comment">        p:targetObject-ref="ticketRegistryCleaner"  </span></span><br><span class="line"><span class="comment">        p:targetMethod="clean" /&gt;  </span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">    &lt;bean id="triggerJobDetailTicketRegistryCleaner" class="org.springframework.scheduling.quartz.SimpleTriggerBean"  </span></span><br><span class="line"><span class="comment">        p:jobDetail-ref="jobDetailTicketRegistryCleaner"  </span></span><br><span class="line"><span class="comment">        p:startDelay="20000"  </span></span><br><span class="line"><span class="comment">        p:repeatInterval="5000000" /&gt; --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CAS4.0分布式部署以及使用Redis缓存共享ticket &lt;/p&gt;
&lt;p&gt;当业务不断拓展，系统用户在不断增加时，我们的平台统一登录认证服务无法承受当前压力。此时，我们需要分布式部署我们的统一登录认证服务。 &lt;/p&gt;
&lt;p&gt;CAS的分布式部署，除了注意session共享，通过nginx或者apache反向代理外，还需要注意票据ticket的存储共享。 在ticketRegistry.xml文件中，配置ticket相关的信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cas" scheme="http://blog.alterem.top/categories/Cas/"/>
    
      <category term="Redis" scheme="http://blog.alterem.top/categories/Cas/Redis/"/>
    
      <category term="Ticket" scheme="http://blog.alterem.top/categories/Cas/Redis/Ticket/"/>
    
    
      <category term="Redis" scheme="http://blog.alterem.top/tags/Redis/"/>
    
      <category term="Cas" scheme="http://blog.alterem.top/tags/Cas/"/>
    
      <category term="Ticket" scheme="http://blog.alterem.top/tags/Ticket/"/>
    
  </entry>
  
  <entry>
    <title>Spring极速集成注解Redis实践</title>
    <link href="http://blog.alterem.top/2019/06/12/Spring%E6%9E%81%E9%80%9F%E9%9B%86%E6%88%90%E6%B3%A8%E8%A7%A3Redis%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blog.alterem.top/2019/06/12/Spring极速集成注解Redis实践/</id>
    <published>2019-06-12T14:09:37.000Z</published>
    <updated>2019-06-12T14:17:54.730Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 做为基于内存的 Key-Value 数据库，用来做缓存服务器性价比相当高。 </p><p>官方推出的面向 Java 的 Client Jedis，提供了很多接口和方法，可以让 Java 操作使用 Redis。 </p><p>Spring 团队对 Jedis 进行了封装，独立为 spring-data-redis 项目，配合 spring 特性并集成 Jedis 的一些命令和方法。 </p><p>本文重点描述集成过程，能让你迅速的通过 spring-data-redis 将 redis 集成到 spring 项目中,毕竟大家都忙的。 </p><a id="more"></a><h3 id="1-添加项目依赖"><a href="#1-添加项目依赖" class="headerlink" title="1. 添加项目依赖"></a>1. 添加项目依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis 缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-添加-spring-redis-context-配置"><a href="#2-添加-spring-redis-context-配置" class="headerlink" title="2. 添加 spring-redis-context 配置"></a>2. 添加 spring-redis-context 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>redis 相关类 Spring 托管<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--载入 redis 配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JedisPoolConfig 实例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxActive&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWait&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置JedisConnectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.host&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.dbIndex&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置RedisTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置RedisCacheManager --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.cache.RedisCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"redisOperations"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultExpiration"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.expiration&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置RedisCacheConfig --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisCacheConfig"</span> <span class="attr">class</span>=<span class="string">"com.rambo.sdh.common.util.RedisCacheConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"redisCacheManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JedisConnectionFactory 为 Jedis 连接工厂，配置由单独抽象的 JedisPoolConfig 提供。 </p><p>如果你熟悉 Spring 的 JdbcTemplate 对象的话，这里大概能猜出来 RedisTemplate 的作用，RedisTemplate 对 RedisConnection 进行了封装。 </p><p>提供连接管理，序列化等功能，它对 Redis 的交互进行了更高层次的抽象，极大的方便和简化了 Redis 的操作。 </p><p>RedisCacheManager 做为 redis 统一的调度和管理者，有兴趣可以反编译源码看看。 </p><p>继承自 org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager 并实现 org.springframework.cache.CacheManager。 </p><h3 id="3-添加-redis-properties"><a href="#3-添加-redis-properties" class="headerlink" title="3. 添加 redis.properties"></a>3. 添加 redis.properties</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#============================#</span><br><span class="line">#==== Redis settings ====#</span><br><span class="line">#============================#</span><br><span class="line">#redis 服务器 IP</span><br><span class="line">redis.host=127.0.0.1</span><br><span class="line"></span><br><span class="line">#redis 服务器端口</span><br><span class="line">redis.port=6379</span><br><span class="line"></span><br><span class="line">#redis 密码</span><br><span class="line">redis.pass=redis#2017</span><br><span class="line"></span><br><span class="line">#redis 支持16个数据库（相当于不同用户）可以使不同的应用程序数据彼此分开同时又存储在相同的实例上</span><br><span class="line">redis.dbIndex=0</span><br><span class="line"></span><br><span class="line">#redis 缓存数据过期时间单位秒</span><br><span class="line">redis.expiration=3000</span><br><span class="line"></span><br><span class="line">#控制一个 pool 最多有多少个状态为 idle 的jedis实例</span><br><span class="line">redis.maxIdle=300</span><br><span class="line"></span><br><span class="line">#控制一个 pool 可分配多少个jedis实例</span><br><span class="line">redis.maxActive=600</span><br><span class="line"></span><br><span class="line">#当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；</span><br><span class="line">redis.maxWait=1000</span><br><span class="line"></span><br><span class="line">#在borrow一个jedis实例时，是否提前进行alidate操作；如果为true，则得到的jedis实例均是可用的；</span><br><span class="line">redis.testOnBorrow=true</span><br></pre></td></tr></table></figure><p>当然配置文件你也可以硬编码到程序中，只是在参数发生改变的时候比较痛苦一点而已。 </p><p>其中大部分配置项都是围绕着 jedisPool ，如果你对数据库连接池比较熟，你会发现它俩的配置项有点相似。 </p><p>当系统 redis 遇到问题出现故障时，理解这里的选项是个不错的选择。 </p><p>更多配置项详解: </p><blockquote><p><a href="https://link.zhihu.com/?target=http%3A//www.2cto.com/database/201311/254449.html" target="_blank" rel="noopener">http://www.2cto.com/database/201311/254449.html</a> </p></blockquote><h3 id="4-编写自定义-redis-配置类"><a href="#4-编写自定义-redis-配置类" class="headerlink" title="4. 编写自定义 redis 配置类"></a>4. 编写自定义 redis 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(RedisCacheConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> JedisConnectionFactory mJedisConnectionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> RedisTemplate&lt;String, String&gt; mRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> RedisCacheManager mRedisCacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCacheConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCacheConfig</span><span class="params">(JedisConnectionFactory mJedisConnectionFactory, RedisTemplate&lt;String, String&gt; mRedisTemplate, RedisCacheManager mRedisCacheManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.mJedisConnectionFactory = mJedisConnectionFactory;</span><br><span class="line">        <span class="keyword">this</span>.mRedisTemplate = mRedisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.mRedisCacheManager = mRedisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">redisConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mJedisConnectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory cf)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate&lt;?, ?&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRedisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                sb.append(o.getClass().getName());</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该配置类继承自 org.springframework.cache.annotation.CachingConfigurerSupport 并实现 org.springframework.cache.annotation.CachingConfigurer 的方法。 </p><p>通俗一点，该类告诉 spring 当前使用的缓存服务为 redis 并自定义了缓存 key 生成的规则。 </p><h3 id="5-在你喜欢的地方进行注解缓存"><a href="#5-在你喜欢的地方进行注解缓存" class="headerlink" title="5. 在你喜欢的地方进行注解缓存"></a>5. 在你喜欢的地方进行注解缓存</h3><p><img src="https://pic3.zhimg.com/80/v2-c54aee174f2a619924b7ec88c5c9e7ce_hd.jpg" alt="img"></p><p>spring缓存一般使用在服务层，在你想缓存的方法上面添加相应的注解即可，下面三个缓存的注解你得掌握。 </p><ul><li>@Cacheable spring 会在其被调用后将返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。     </li><li>@CachePut 标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。     </li><li>@CacheEvict 用来标注在需要清除缓存元素的方法或类上的。     </li></ul><p>当然这些注解里面还有很多其他的属性配置，配合 spring-el 表达式能做的事情还有很多，大概只有你想不到，没有做不到。 </p><p>在业务规则比较复杂的情况下，缓存 key 的设计相当重要，设计出色可以使你的应用飞起来。 </p><p>整个集成工作就结束了，是不是很简单，上述算是 redis 的冰山一角，还有很多像 redis 路由/分布式/集群….，有机会实践慢慢体会。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 做为基于内存的 Key-Value 数据库，用来做缓存服务器性价比相当高。 &lt;/p&gt;
&lt;p&gt;官方推出的面向 Java 的 Client Jedis，提供了很多接口和方法，可以让 Java 操作使用 Redis。 &lt;/p&gt;
&lt;p&gt;Spring 团队对 Jedis 进行了封装，独立为 spring-data-redis 项目，配合 spring 特性并集成 Jedis 的一些命令和方法。 &lt;/p&gt;
&lt;p&gt;本文重点描述集成过程，能让你迅速的通过 spring-data-redis 将 redis 集成到 spring 项目中,毕竟大家都忙的。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alterem.top/categories/Java/"/>
    
      <category term="Spring" scheme="http://blog.alterem.top/categories/Java/Spring/"/>
    
      <category term="Redis" scheme="http://blog.alterem.top/categories/Java/Spring/Redis/"/>
    
    
      <category term="Redis" scheme="http://blog.alterem.top/tags/Redis/"/>
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
      <category term="Spring" scheme="http://blog.alterem.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>运算符优先级</title>
    <link href="http://blog.alterem.top/2019/06/12/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://blog.alterem.top/2019/06/12/运算符优先级/</id>
    <published>2019-06-12T10:43:48.000Z</published>
    <updated>2019-06-18T05:01:12.878Z</updated>
    
    <content type="html"><![CDATA[<p>Java 运算符优先级</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">优先级</th></tr></thead><tbody><tr><td style="text-align:left">postfix</td><td style="text-align:left"><em>expr</em>++ <em>expr</em>–</td></tr><tr><td style="text-align:left">unary</td><td style="text-align:left">++<em>expr</em> –<em>expr</em> +<em>expr</em> -<em>expr</em> ~ !</td></tr><tr><td style="text-align:left">multiplicative</td><td style="text-align:left">* / %</td></tr><tr><td style="text-align:left">additive</td><td style="text-align:left">+ -</td></tr><tr><td style="text-align:left">shift</td><td style="text-align:left">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td style="text-align:left">relational</td><td style="text-align:left">&lt; &gt; &lt;= &gt;= instanceof</td></tr><tr><td style="text-align:left">equality</td><td style="text-align:left">== !=</td></tr><tr><td style="text-align:left">bitwise AND</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:left">bitwise exclusive OR</td><td style="text-align:left">^</td></tr><tr><td style="text-align:left">bitwise inclusive OR</td><td style="text-align:left">&#124;</td></tr><tr><td style="text-align:left">logical AND</td><td style="text-align:left">&amp;&amp;</td></tr><tr><td style="text-align:left">logical OR</td><td style="text-align:left">&#124;&#124;</td></tr><tr><td style="text-align:left">ternary</td><td style="text-align:left">? :</td></tr><tr><td style="text-align:left">assignment</td><td style="text-align:left">= += -= *= /= %= &amp;= ^=</td></tr></tbody></table><p>C++运算符优先级</p><table><thead><tr><th style="text-align:left">Precedence</th><th style="text-align:left">Operator</th><th style="text-align:left">Description</th><th style="text-align:left">Associativity</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">::</td><td style="text-align:left">Scope resolution</td><td style="text-align:left">Left-to-right</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">++    –</td><td style="text-align:left">Suffix/postfix increment and decrement</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">()</td><td style="text-align:left">Function call</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[]</td><td style="text-align:left">Array subscripting</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">.</td><td style="text-align:left">Element selection by reference</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">−&gt;</td><td style="text-align:left">Element selection through pointer</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">++    –</td><td style="text-align:left">Prefix increment and decrement</td><td style="text-align:left">Right-to-left</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+    −</td><td style="text-align:left">Unary plus and minus</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">!    ~</td><td style="text-align:left">Logical NOT and bitwise NOT</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">(<em>type</em>)</td><td style="text-align:left">Type cast</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">*</td><td style="text-align:left">Indirection (dereference)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&amp;</td><td style="text-align:left">Address-of</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof</td><td style="text-align:left">Size-of</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">new,  new[]</td><td style="text-align:left">Dynamic memory allocation</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">delete,  delete[]</td><td style="text-align:left">Dynamic memory deallocation</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">.<em>    -&gt;</em></td><td style="text-align:left">Pointer to member</td><td style="text-align:left">Left-to-right</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">*    /    %</td><td style="text-align:left">Multiplication, division, and remainder</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">+    −</td><td style="text-align:left">Addition and subtraction</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">&lt;&lt;    &gt;&gt;</td><td style="text-align:left">Bitwise left shift and right shift</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">&lt;    &lt;=</td><td style="text-align:left">For relational operators &lt; and ≤ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&gt;    &gt;=</td><td style="text-align:left">For relational operators &gt; and ≥ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">==    !=</td><td style="text-align:left">For relational = and ≠ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">&amp;</td><td style="text-align:left">Bitwise AND</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">^</td><td style="text-align:left">Bitwise XOR (exclusive or)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">&#124;</td><td style="text-align:left">Bitwise OR (inclusive or)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">Logical AND</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">&#124;&#124;</td><td style="text-align:left">Logical OR</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">?:</td><td style="text-align:left">Ternary conditional</td><td style="text-align:left">Right-to-Left</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">=</td><td style="text-align:left">Direct assignment (provided by default for C++ classes)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+=    −=</td><td style="text-align:left">Assignment by sum and difference</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">*=    /=    %=</td><td style="text-align:left">Assignment by product, quotient, and remainder</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&lt;&lt;=    &gt;&gt;=</td><td style="text-align:left">Assignment by bitwise left shift and right shift</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&amp;=    ^=    &#124;=</td><td style="text-align:left">Assignment by bitwise AND, XOR, and OR</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">throw</td><td style="text-align:left">Throw operator (for exceptions)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">,</td><td style="text-align:left">Comma</td><td style="text-align:left">Left-to-right</td></tr></tbody></table><p>C语言运算符优先级</p><table><thead><tr><th style="text-align:left">Precedence</th><th style="text-align:left">Operator</th><th style="text-align:left">Description</th><th style="text-align:left">Associativity</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">++  –</td><td style="text-align:left">Suffix/postfix increment and decrement</td><td style="text-align:left">Left-to-right</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">()</td><td style="text-align:left">Function call</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[]</td><td style="text-align:left">Array subscripting</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">.</td><td style="text-align:left">Structure and union member access</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">−&gt;</td><td style="text-align:left">Structure and union member access through pointer</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">(<em>type</em>){<em>list</em>}</td><td style="text-align:left">Compound literal(C99)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">++  –</td><td style="text-align:left">Prefix increment and decrement</td><td style="text-align:left">Right-to-left</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+  −</td><td style="text-align:left">Unary plus and minus</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">!  ~</td><td style="text-align:left">Logical NOT and bitwise NOT</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">(<em>type</em>)</td><td style="text-align:left">Type cast</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">*</td><td style="text-align:left">Indirection (dereference)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&amp;</td><td style="text-align:left">Address-of</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">sizeof</td><td style="text-align:left">Size-of</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">_Alignof</td><td style="text-align:left">Alignment requirement(C11)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">*  /  %</td><td style="text-align:left">Multiplication, division, and remainder</td><td style="text-align:left">Left-to-right</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">+  −</td><td style="text-align:left">Addition and subtraction</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">&lt;&lt;  &gt;&gt;</td><td style="text-align:left">Bitwise left shift and right shift</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">&lt;  &lt;=</td><td style="text-align:left">For relational operators &lt; and ≤ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&gt;  &gt;=</td><td style="text-align:left">For relational operators &gt; and ≥ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">==  !=</td><td style="text-align:left">For relational = and ≠ respectively</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">&amp;</td><td style="text-align:left">Bitwise AND</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">^</td><td style="text-align:left">Bitwise XOR (exclusive or)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">&#124;</td><td style="text-align:left">Bitwise OR (inclusive or)</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">Logical AND</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">&#124;&#124;</td><td style="text-align:left">Logical OR</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">?:</td><td style="text-align:left">Ternary conditional</td><td style="text-align:left">Right-to-Left</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">=</td><td style="text-align:left">Simple assignment</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">+=  −=</td><td style="text-align:left">Assignment by sum and difference</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">*=  /=  %=</td><td style="text-align:left">Assignment by product, quotient, and remainder</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&lt;&lt;=  &gt;&gt;=</td><td style="text-align:left">Assignment by bitwise left shift and right shift</td><td style="text-align:left"></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">&amp;=  ^=</td><td style="text-align:left">=</td><td style="text-align:left">Assignment by bitwise AND, XOR, and OR</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">,</td><td style="text-align:left">Comma</td><td style="text-align:left">Left-to-right</td></tr></tbody></table><p>PHP运算符优先级</p><table><thead><tr><th style="text-align:left">结合方向</th><th style="text-align:left">运算符</th><th style="text-align:left">附加信息</th></tr></thead><tbody><tr><td style="text-align:left">非结合</td><td style="text-align:left">clone new</td><td style="text-align:left">clone 和 new</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">[</td><td style="text-align:left">array()</td></tr><tr><td style="text-align:left">非结合</td><td style="text-align:left">++ –</td><td style="text-align:left">递增／递减运算符</td></tr><tr><td style="text-align:left">非结合</td><td style="text-align:left">~ - (int) (float) (string) (array) (object) (bool) @</td><td style="text-align:left">类型</td></tr><tr><td style="text-align:left">非结合</td><td style="text-align:left">instanceof</td><td style="text-align:left">类型</td></tr><tr><td style="text-align:left">右结合</td><td style="text-align:left">!</td><td style="text-align:left">逻辑操作符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">* / %</td><td style="text-align:left">算术运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">+ - .</td><td style="text-align:left">算术运算符 和 字符串运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">&lt;&lt; &gt;&gt;</td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left">非结合</td><td style="text-align:left">&lt; &lt;= &gt; &gt;= &lt;&gt;</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left">非结合</td><td style="text-align:left">== != === !==</td><td style="text-align:left">比较运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">&amp;</td><td style="text-align:left">位运算符 和 引用</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">^</td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">&#124;</td><td style="text-align:left">位运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">逻辑运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">&#124;&#124;</td><td style="text-align:left">逻辑运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">? :</td><td style="text-align:left">三元运算符</td></tr><tr><td style="text-align:left">右</td><td style="text-align:left">= += -= *= /= .= %= &amp;= &#124;= ^= &lt;&lt;= &gt;&gt;=</td><td style="text-align:left">赋值运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">and</td><td style="text-align:left">逻辑运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">xor</td><td style="text-align:left">逻辑运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">or</td><td style="text-align:left">逻辑运算符</td></tr><tr><td style="text-align:left">左</td><td style="text-align:left">,</td><td style="text-align:left">多处用到</td></tr></tbody></table><p>Python 运算符优先级<br>| 运算符               | 描述             | 序号 |<br>| :——————- | :————— | —- |<br>| lambda               | Lambda表达式     | 1    |<br>| or                   | 布尔“或”         | 2    |<br>| and                  | 布尔“与”         | 3    |<br>| not x                | 布尔“非”         | 4    |<br>| in，not in           | 成员测试         | 5    |<br>| is，is not           | 同一性测试       | 6    |<br>| &lt;，&lt;=，&gt;，&gt;=，!=，== | 比较             | 7    |<br>| &#124;               | 按位或           | 8    |<br>| ^                    | 按位异或         | 9    |<br>| &amp;                    | 按位与           | 10   |<br>| &lt;&lt;，&gt;&gt;               | 移位             | 11   |<br>| +，-                 | 加法与减法       | 12   |<br>| *，/，%              | 乘法、除法与取余 | 13   |<br>| +x，-x               | 正负号           | 14   |<br>| ~x                   | 按位翻转         | 15   |<br>| **                   | 指数             | 16   |<br>| x.attribute          | 属性参考         | 17   |<br>| x[index]             | 下标             | 18   |<br>| x[index:index]       | 寻址段           | 19   |<br>| f(arguments…)      | 函数调用         | 20   |<br>| (experession,…)    | 绑定或元组显示   | 21   |<br>| [expression,…]     | 列表显示         | 22   |<br>| {key:datum,…}      | 字典显示         | 23   |<br>| ‘expression,…’     | 字符串转换       | 24   |</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 运算符优先级&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;运算符&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;优先级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr
      
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alterem.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>EurekaClient注册到EurekaServer的秘密</title>
    <link href="http://blog.alterem.top/2019/06/12/EurekaClient%E6%B3%A8%E5%86%8C%E5%88%B0EurekaServer%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://blog.alterem.top/2019/06/12/EurekaClient注册到EurekaServer的秘密/</id>
    <published>2019-06-12T10:10:20.000Z</published>
    <updated>2019-06-12T10:14:31.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道Eureka分为两部分，Eureka Server和Eureka Client。Eureka Server充当注册中心的角色，Eureka Client相对于Eureka Server来说是客户端，需要将自身信息注册到注册中心。本文主要介绍的就是在Eureka Client注册到Eureka Server时     <code>RetryableClientQuarantineRefreshPercentage</code>参数的使用技巧。 </p><a id="more"></a><h2 id="Eureka-Client注册过程分析"><a href="#Eureka-Client注册过程分析" class="headerlink" title="Eureka Client注册过程分析"></a>Eureka Client注册过程分析</h2><p>Eureka Client注册到Eureka Server时，首先遇到第一个问题就是Eureka Client端要知道Server的地址，这个参数对应的是     <code>eureka.client.service-url.defaultZone</code>举个例子，在Eureka Client的properties文件中配置如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.service-url.defaultZone=</span><br><span class="line">http://localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka,http://localhost:8764/eureka</span><br></pre></td></tr></table></figure><p>如上图所示，Eureka Client配置对应的Eureka Server地址分别是8761、8762、8763、8764。这里存在两个问题： </p><ul><li>Eureka Client会将自身信息分别注册到这四个地址吗？     </li><li>Eureka Clinent注册机制是怎样的？     </li></ul><p>源码面前一目了然，带着这两个问题我们通过源码来解答这两个问题。Eureka Client在启动的时候注册源码如下：<br><code>RetryableEurekaHttpClient</code>中的<code>execut</code>方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> &lt;R&gt; <span class="function">EurekaHttpResponse&lt;R&gt; <span class="title">execute</span><span class="params">(RequestExecutor&lt;R&gt; requestExecutor)</span> </span>&#123;</span><br><span class="line">    List&lt;EurekaEndpoint&gt; candidateHosts = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> endpointIdx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> retry = <span class="number">0</span>; retry &lt; numberOfRetries; retry++) &#123;</span><br><span class="line">        EurekaHttpClient currentHttpClient = delegate.get();</span><br><span class="line">        EurekaEndpoint currentEndpoint = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (currentHttpClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (candidateHosts == <span class="keyword">null</span>) &#123;</span><br><span class="line">                candidateHosts = getHostCandidates();</span><br><span class="line">                <span class="keyword">if</span> (candidateHosts.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> TransportException(<span class="string">"There is no known eureka server; cluster server list is empty"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (endpointIdx &gt;= candidateHosts.size()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TransportException(<span class="string">"Cannot execute request on any known server"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentEndpoint = candidateHosts.get(endpointIdx++);</span><br><span class="line">            currentHttpClient = clientFactory.newClient(currentEndpoint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EurekaHttpResponse&lt;R&gt; response = requestExecutor.execute(currentHttpClient);</span><br><span class="line">            <span class="keyword">if</span> (serverStatusEvaluator.accept(response.getStatusCode(), requestExecutor.getRequestType())) &#123;</span><br><span class="line">                delegate.set(currentHttpClient);</span><br><span class="line">                <span class="keyword">if</span> (retry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">"Request execution succeeded on retry #&#123;&#125;"</span>, retry);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line">            logger.warn(<span class="string">"Request execution failure with status code &#123;&#125;; retrying on another server if available"</span>, response.getStatusCode());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Request execution failed with message: &#123;&#125;"</span>, e.getMessage());  <span class="comment">// just log message as the underlying client should log the stacktrace</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Connection error or 5xx from the server that must be retried on another server</span></span><br><span class="line">        delegate.compareAndSet(currentHttpClient, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentEndpoint != <span class="keyword">null</span>) &#123;</span><br><span class="line">            quarantineSet.add(currentEndpoint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransportException(<span class="string">"Retry limit reached; giving up on completing the request"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我的理解，代码精简后内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> endpointIdx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//用来保存所有Eureka Server信息(8761、8762、8763、8764)</span></span><br><span class="line">List&lt;EurekaEndpoint&gt; candidateHosts = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//numberOfRetries的值代码写死默认为3次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> retry = <span class="number">0</span>; retry &lt; numberOfRetries; retry++) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *首次进入循环时，获取全量的Eureka Server信息(8761、8762、8763、8764)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (candidateHosts == <span class="keyword">null</span>) &#123;</span><br><span class="line">        candidateHosts = getHostCandidates();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *通过endpointIdx自增，依次获取Eureka Server信息，然后发送</span></span><br><span class="line"><span class="comment"> *注册的Post请求.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    currentEndpoint = candidateHosts.get(endpointIdx++);</span><br><span class="line">    currentHttpClient = clientFactory.newClient(currentEndpoint);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *发送注册的Post请求动作，注意如果成功，则跳出循环，如果失败则</span></span><br><span class="line"><span class="comment"> *根据endpointIdx依次获取下一个Eureka Server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        response = requestExecutor.execute(currentHttpClient);</span><br><span class="line">        <span class="keyword">return</span> respones;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//向注册中心(Eureka Server)发起注册的post出现异常时，打印日志...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果此次注册动作失败，将当前的信息保存到quarantineSet中(一个Set集合)</span></span><br><span class="line">    <span class="keyword">if</span> (currentEndpoint != <span class="keyword">null</span>) &#123;</span><br><span class="line">        quarantineSet.add(currentEndpoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果都失败,则以异常形式抛出...</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> TransportException(<span class="string">"Retry limit reached; giving up on completing the request"</span>);</span><br></pre></td></tr></table></figure><p>上面代码中还有一个方法很重要就是     <code>List&lt;EurekaEndpoint&gt; candidateHosts = getHostCandidates();</code>接下来看下     <code>getHostCandidates()</code>方法源码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="title">getHostCandidates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;EurekaEndpoint&gt; candidateHosts = clusterResolver.getClusterEndpoints();</span><br><span class="line">    quarantineSet.retainAll(candidateHosts);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enough hosts are bad, we have no choice but start over again</span></span><br><span class="line">    <span class="keyword">int</span> threshold = (<span class="keyword">int</span>) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());</span><br><span class="line">    <span class="keyword">if</span> (quarantineSet.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// no-op</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Clearing quarantined list of size &#123;&#125;"</span>, quarantineSet.size());</span><br><span class="line">        quarantineSet.clear();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());</span><br><span class="line">        <span class="keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;</span><br><span class="line">                remainingHosts.add(endpoint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        candidateHosts = remainingHosts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidateHosts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我的理解，将代码精简下，只包括关键逻辑，内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="title">getHostCandidates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有defaultZone配置的注册中心信息(Eureka Server)，</span></span><br><span class="line"><span class="comment">     * 在本文例子中代表4个(8761、8762、8763、8764)Eureka Server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List candidateHosts = clusterResolver.getClusterEndpoints();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * quarantineSet这个Set集合中保存的是不可用的Eureka Server</span></span><br><span class="line"><span class="comment">     * 此处是拿不可用的Eureka Server与全量的Eureka Server取交集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    quarantineSet.retainAll(candidateHosts);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据RetryableClientQuarantineRefreshPercentage参数计算阈值</span></span><br><span class="line"><span class="comment">     * 该阈值后续会和quarantineSet中保存的不可用的Eureka Server个数</span></span><br><span class="line"><span class="comment">     * 作比较，从而判断是否返回全量的Eureka Server还是过滤掉不可用的</span></span><br><span class="line"><span class="comment">     * Eureka Server。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> threshold = </span><br><span class="line">       (<span class="keyword">int</span>) (</span><br><span class="line">        candidateHosts.size()</span><br><span class="line">              *</span><br><span class="line">        transportConfig.getRetryableClientQuarantineRefreshPercentage()</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">if</span> (quarantineSet.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 首次进入的时候，此时quarantineSet为空，直接返回全量的</span></span><br><span class="line"><span class="comment">         * Eureka Server列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将不可用的Eureka Server与threshold值相比较，如果不可</span></span><br><span class="line"><span class="comment">         * 用的Eureka Server个数大于阈值，则将之间保存的Eureka</span></span><br><span class="line"><span class="comment">         * Server内容直接清空，并返回全量的Eureka Server列表。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        quarantineSet.clear();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过quarantineSet集合保存不可用的Eureka Server来过滤</span></span><br><span class="line"><span class="comment">         * 全量的EurekaServer，从而获取此次Eureka Client要注册要</span></span><br><span class="line"><span class="comment">         * 注册的Eureka Server实例地址。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());</span><br><span class="line">        <span class="keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;</span><br><span class="line">                remainingHosts.add(endpoint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        candidateHosts = remainingHosts;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> candidateHosts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码分析，我们现在初步知道，当Eureka Client向Eureka Server发起注册请求的时候(根据defaultZone寻找Eureka Server列表)，如果有一次请求注册成功，那么后续就不会在向其他Eureka Server发起注册请求。以本文为例，注册中心有四个(8761、8762、8763、8764)。如果8761对应的Eureka Server服务的状态是UP，那么Eureka Client向该注册中心注册成功后，不会再向(8762、8763、8764)对应的Eureka Server发起注册请求(对应程序是在for循环中直接return respones)。 </p><p>说到这里又引出来另外一个问题，如果8761这个Eureka Server是down掉的呢？ </p><p>根据源码我们可知Eureka Client首次会向8761这个Server发起注册请求，如果该Server的状态是down，那么它会将该Server保存到quarantineSet这个Set集合中，然后再次访问8762这个Eureka Server，如果8762这个Server的状态依旧是down，它也会把这个Server保存到quarantineSet这个Set集合中，然后继续访问8763这个Server，如果8763这个Server的状态依旧是down，此时除了会将其保存到quarantineSet这个Set集合中之外，还会跳出本次循环。从而结束此次注册过程。 </p><p>说道这里有人要问接下来会不会向8764这个Server发起注册，答案是否定的，因为循环的次数默认是3次。所以即使8764这个Server的状态是UP，它也不会接收到来自Eureka Client发起的注册信息。 </p><p>Eureka Client向Eureka Server发起注册信息的过程除了在Eureka Client启动的时候触发，还有另外一种方式，就是后台定时任务。<br>假设我们上面描述的场景是在Eureka Client启动的时候，因为在启动的时候注册这个过程全部失败了，当后台定时任务执行时，还会进入该注册流程。注意此时quarantineSet的值为3(8761、8762、8763之前注册失败的Eureka Server)。<br>所以当程序再次进入     <code>getHostCandidates()</code>方法时，     <code>if (quarantineSet.isEmpty())</code>这个方法是不满足的，接下来会走     <code>else if (quarantineSet.size() &gt;= threshold)</code>这个判断，如果这个判断成立，那么会将quarantineSet集合清空，同时返回全量的Eureka Server列表，如果这个判断不成立，会拿quarantineSet集合中保存的内容去过滤Eureka Server的全量列表。以本文为例： </p><ul><li><code>quarantineSet</code>中保存的是(8761、8762、8763)三个Eureka Server     </li><li>Eureka Server全量列表的内容是(8761、8762、8763、8764)四个Eureka Server，过滤后返回的结果为8764这个Eureka Server。     </li></ul><p>在本文的例子中8761、8762、8763这三个Eureka Server的状态是down而8764这个Eureka Server的状态是UP，我们其实是想走到最后的else分支，从而完成过滤操作，并最终得到8764这个Server，遗憾的是它并不会走到这个分支，而是被上面的     <code>else if (quarantineSet.size() &gt;= threshold)</code>这个分支所拦截，返回的依旧是全量的Eureka Server列表。这样造成的后果就是Eureka Client依旧会依次向(8761、8762、8763)这三个down的Eureka Server发起注册请求。<br>那么问题的关键在哪里呢？问题的关键就是threshold这个值的由来，因为此时quarantineSet.size()的值为3，而3这个值大于threshold，从而导致，会将quarantineSet集合清空，返回全量的Server列表。<br>我们知道threshold这个值是根据全量的Eureka Server列表乘以一个可配置的参数计算出来的，在本文的例子当中，我的properties文件中除了defaultZone之外并没有配置这个参数，那么也就是说这个参数是有默认值的，通过源码我们了解到，这个默认值是0.66。具体源码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyBasedTransportConfigConstants</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *省略部分源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_RECONNECT_INTERVAL = <span class="number">20</span>*<span class="number">60</span>;</span><br><span class="line">        <span class="comment">//默认值为0.66</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> QUARANTINE_REFRESH_PERCENTAGE = <span class="number">0.66</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATA_STALENESS_TRHESHOLD = <span class="number">5</span>*<span class="number">60</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASYNC_RESOLVER_REFRESH_INTERVAL = <span class="number">5</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASYNC_RESOLVER_WARMUP_TIMEOUT = <span class="number">5000</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASYNC_EXECUTOR_THREADPOOL_SIZE = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@return</span> the percentage of the full endpoints set above which the   </span></span><br><span class="line"><span class="comment"> *quarantine set is cleared in the range [0, 1.0]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getRetryableClientQuarantineRefreshPercentage</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>看到这里就不难理解了，因为这个值是0.66而此时全量的Eureka Server值为4。计算之后的值为2，而由于注册的for循环为3次，所以当第二次发起注册流程的时候quarantineSet的值始终大于threshold。这样就会导致一个问题，就是如果8761、8762、8763一直是down即使8764一直是好的，那么Eureka Client也不会注册成功。而且这个参数值的区间为0到1. </p><p>既然通过源码分析我们找到了问题根源，其实对应的我们也找到了解决这个问题的办法，就是对应把这个参数值调大些。<br>这个值在properties中对应的写法如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.transport.retryableClientQuarantineRefreshPercentage = xxx</span><br></pre></td></tr></table></figure><p>接下来我们修改下properties文件，修改后的内容如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka.client.service-url.defaultZone=</span><br><span class="line">http:<span class="comment">//localhost:8761/eureka,http://localhost:8762/eureka,http://localhost:8763/eureka,http://localhost:8764/eureka</span></span><br><span class="line">eureka.client.transport.retryableClientQuarantineRefreshPercentage=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>接下来按照这个配置再次回顾下上面的流程： </p><ul><li>Eureka Client启动时进行注册(8761、8762、8763的状态是down)，所以此时quarantineSet的值为3.     </li><li>接下来在定时任务中又触发注册事件，此时因为参数的值从0.66调整为1。所以计算出的threshold的值为4。而此时quarantineSet的值为3。所以不会进入到         <code>else if (quarantineSet.size() &gt;= threshold)</code>分支，而是会进入最后的esle分支。     </li><li>在else分支中会完成过滤功能，最终返回的list中的结果只有一个就是8764这个Eureka Server。     </li><li>Eureka Client向8764这个Eureka Server发起注册请求，得到成功相应，并返回。     </li></ul><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>说道这里我们感觉好像是解决了这个问题，那么问一个问题，这个参数值可以设置的无限大吗？ </p><p>比如我将这个参数值设置为10，虽然javaDoc中说明这个参数值的范围在0-1之间，但是并没有说明如果将这个参数调整大于1会出现什么情况。接下来按照上面的流程我们分析下：<br>之前我们分析的流程中的前提是8761、8762、8763这三台Server的状态是down而8764这个server的状态是up，现在我们修改下这个前提。<br>假设一开始8761、8762、8763、8764这四台Eureka Server的状态都是down。 </p><ul><li>Eureka Client启动时进行注册(8761、8762、8763的状态是down)，所以此时quarantineSet的值为3.     </li><li>接下来在定时任务中又触发注册事件，此时因为参数的值从0.66调整为10。所以计算出的threshold的值为40。而此时quarantineSet的值为3。所以不会进入到         <code>else if (quarantineSet.size() &gt;= threshold)</code>分支，而是会进入最后的esle分支。     </li><li>在else分支中会完成过滤功能，最终返回的list中的结果只有一个就是8764这个Eureka Server。     </li><li>Eureka Client向8764这个Eureka Server发起注册请求，因为此时8764的状态也是down导致注册失败，此时quarantineSet中的内容是(8761、8762、8763、8764)     </li><li>当定时任务再次触发时         <code>if (quarantineSet.isEmpty())</code>这个分支不会进入，因为此时quarantineSet的值为4     </li><li><code>else if (quarantineSet.size() &gt;= threshold)</code>这分支也不会进入因为threshold的值为40     </li><li>最终会进入else分支，这个分支原本的含义是想通过quarantineSet来充当过滤器，从全量的Eureka Server中过滤掉之前状态为down的Eureka Server，但是由于quarantineSet的值现在已经是全量，导致过滤后的结果返回的是一个空的list。即使此时Eureka Server列表(8761、8762、8763、8764)任何一个Server的状态变为UP，该Eureka Client也不可能完成注册事件。     </li></ul><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>上面出现的那个问题，根本原因个人认为是由于     <code>eureka.client.transport.retryableClientQuarantineRefreshPercentage</code>参数过大而源码中没有校验，从而导致没有进入     <code>else if (quarantineSet.size() &gt;= threshold)</code>的逻辑分支，因为此时如果quarantineSet中的值已经达到了所有Eureka Server列表，那么此时我们希望的是将这个Set集合清空，从而再次返回全量的Eureka Server列表，也就是说再重新来一次注册流程。<br>所以基于上面的分析，个人认为在源码的     <code>getHostCandidates</code>增加下校验，具体代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;EurekaEndpoint&gt; <span class="title">getHostCandidates</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;EurekaEndpoint&gt; candidateHosts = clusterResolver.getClusterEndpoints();</span><br><span class="line">    quarantineSet.retainAll(candidateHosts);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enough hosts are bad, we have no choice but start over again</span></span><br><span class="line">    <span class="keyword">int</span> threshold = (<span class="keyword">int</span>) (candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加判断如果threshold的值过大，即超过Eureka Server</span></span><br><span class="line"><span class="comment">     * 列表的数量，那么将其再次赋值，赋值的内容为Eureka Server</span></span><br><span class="line"><span class="comment">     * 列表的数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threshold &gt; candidateHosts.size()) &#123;</span><br><span class="line">      threshold = candidateHosts.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (quarantineSet.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// no-op</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (quarantineSet.size() &gt;= threshold) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Clearing quarantined list of size &#123;&#125;"</span>, quarantineSet.size());</span><br><span class="line">        quarantineSet.clear();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        List&lt;EurekaEndpoint&gt; remainingHosts = <span class="keyword">new</span> ArrayList&lt;&gt;(candidateHosts.size());</span><br><span class="line">        <span class="keyword">for</span> (EurekaEndpoint endpoint : candidateHosts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!quarantineSet.contains(endpoint)) &#123;</span><br><span class="line">                remainingHosts.add(endpoint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        candidateHosts = remainingHosts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> candidateHosts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容就是个人对     <code>eureka.client.transport.retryableClientQuarantineRefreshPercentage</code>的理解，由于本人知识水平有限，对此问题也可能理解不正确，还请大家多多留言讨论。</p><p>最后感谢<a href="http://spring4all.com/" target="_blank" rel="noopener">spring4all社区</a>提供这个平台，能让大家交流学习Spring相关知识。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道Eureka分为两部分，Eureka Server和Eureka Client。Eureka Server充当注册中心的角色，Eureka Client相对于Eureka Server来说是客户端，需要将自身信息注册到注册中心。本文主要介绍的就是在Eureka Client注册到Eureka Server时     &lt;code&gt;RetryableClientQuarantineRefreshPercentage&lt;/code&gt;参数的使用技巧。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Eureka" scheme="http://blog.alterem.top/categories/Eureka/"/>
    
    
      <category term="Eureka" scheme="http://blog.alterem.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://blog.alterem.top/2019/06/12/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.alterem.top/2019/06/12/使用hexo搭建个人博客/</id>
    <published>2019-06-12T09:34:09.000Z</published>
    <updated>2019-06-12T16:00:08.993Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始研究blog，找到了很多开源的系统，java、asp、nodejs、php，下面介绍一种基于nodejs的开源blog，网上有很多关于hexo的文档但是个人感觉还是欠缺不能一次达到目的，因为本人现在手上只有<strong>mint发行版的linux，所以直接用mint直接搭建</strong>，因为hexo是基于nodejs的应用，所以要先安装nodejs </p><hr><h4 id="1-Nodejs安装"><a href="#1-Nodejs安装" class="headerlink" title="1.Nodejs安装"></a>1.Nodejs安装</h4><p>使用apt-get 安装的nodejs版本过老，会导致安装hexo的时候出问题。<br>官方推荐的安装方法： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>centos 上： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v7.7.4/node-v7.7.4-linux-x64.tar.gz</span><br><span class="line">tar zxvf node-v7.7.4-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><a id="more"></a><p>sudo vi /etc/profile </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># node （注释作用）</span><br><span class="line">export NODE_HOME=/home/user/software/node-v7.7.4-linux-x64</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin  </span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br></pre></td></tr></table></figure><p>:wq （保存并退出）<br>source /etc/profile （使配置文件生效） </p><h4 id="2-Hexo安装"><a href="#2-Hexo安装" class="headerlink" title="2.Hexo安装"></a>2.Hexo安装</h4><p><a href="https://github.com/hexojs/hexo/" target="_blank" rel="noopener">Hexo</a> 是一个功能强大的静态网站生成系统，快速、简洁、高效。Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。可以一键部署到github，还有丰富的插件和主题,还支持热部署哦。执行如下命令进行安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装Hexo安成后，使用如下命令快速新建一个博客系统，然后运行它： </p><ol><li><code>hexo init blog</code>     </li><li><code>cd blog</code>     </li><li><code>npm install</code>     </li><li><code>hexo server</code>     </li></ol><p>如果npm安装失败，请使用sudo安装。运行成功后，访问 <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a><a href="http://127.0.0.1:4000/" target="_blank" rel="noopener"> </a> </p><p>Hexo 生成博客的目录结构： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>其中_config.yml是配置站点的文件，public是hexo生成的静态站点文件夹，scaffolds是模板文件夹，source是存在用户资源的文件夹，themes是主题文件夹。</p><h4 id="3-站点配置"><a href="#3-站点配置" class="headerlink" title="3.站点配置"></a>3.站点配置</h4><p>找到title，subtitle，author参数配置，分别配置站点的标题、副标题和作者 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Alter的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">专注于Java</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">我就是我不一样的水果</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Alter</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>然后配置站点的url和permalink，这两个分别是你的站点的url host地址以及文章的永久连接 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="attr">http://www.alterempty.cn</span></span><br><span class="line"><span class="attr">root:</span><span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span><span class="string">:year/:month/:day/:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p>permalink 我配置的是年月日以及title，后缀是html，便于搜索收录。permalink详情参见： <a href="http://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">http://hexo.io/zh-cn/docs/permalinks.html</a> </p><h4 id="4-新增一篇文章"><a href="#4-新增一篇文章" class="headerlink" title="4.新增一篇文章"></a>4.新增一篇文章</h4><p>使用如下命令即可新增一篇md格式的文章： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new'github-page-with-hexo'</span><br></pre></td></tr></table></figure><p>然后就会在sources/_posts生成一篇文件名为github-page-with-hexo.md的markdown文件。编辑该文件就可以写博客了 </p><p>Front-matter 是文件最上方以 —- 分隔的区域，用于指定个别文件的变量，举例来说： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title:"使用Hexo在Github上搭建自己的博客"</span><br><span class="line">date:2017-03-22 00:00:04</span><br><span class="line">tags:</span><br><span class="line">-Hexo</span><br><span class="line">-Github</span><br><span class="line">categories:</span><br><span class="line">-Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>目前的categories只能有一个一级分类，如果填写多个，第二个会被解析为二级分类，以及类推。tags可以允许有多个。更多关于Front-matter请参考 <a href="http://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener">http://hexo.io/zh-cn/docs/front-matter.html</a> 。 </p><h4 id="5-安装git"><a href="#5-安装git" class="headerlink" title="5.安装git"></a>5.安装git</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>通过 git –version 查看是否安装成功 </p><h4 id="6-申请GitHub"><a href="#6-申请GitHub" class="headerlink" title="6.申请GitHub"></a>6.申请GitHub</h4><h4 id="7-发布博客"><a href="#7-发布博客" class="headerlink" title="7.发布博客"></a>7.发布博客</h4><p> 发布更新博客 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g</span></span><br></pre></td></tr></table></figure><p>然后等个几分钟，访问你的域名就可以看到你的网站了 </p><p>注：从github上获取数据的办法有很多，就不一一阐述 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始研究blog，找到了很多开源的系统，java、asp、nodejs、php，下面介绍一种基于nodejs的开源blog，网上有很多关于hexo的文档但是个人感觉还是欠缺不能一次达到目的，因为本人现在手上只有&lt;strong&gt;mint发行版的linux，所以直接用mint直接搭建&lt;/strong&gt;，因为hexo是基于nodejs的应用，所以要先安装nodejs &lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-Nodejs安装&quot;&gt;&lt;a href=&quot;#1-Nodejs安装&quot; class=&quot;headerlink&quot; title=&quot;1.Nodejs安装&quot;&gt;&lt;/a&gt;1.Nodejs安装&lt;/h4&gt;&lt;p&gt;使用apt-get 安装的nodejs版本过老，会导致安装hexo的时候出问题。&lt;br&gt;官方推荐的安装方法： &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install -y nodejs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;centos 上： &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://nodejs.org/dist/v7.7.4/node-v7.7.4-linux-x64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar zxvf node-v7.7.4-linux-x64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://blog.alterem.top/categories/Hexo/"/>
    
      <category term="Blog" scheme="http://blog.alterem.top/categories/Hexo/Blog/"/>
    
    
      <category term="Hexo" scheme="http://blog.alterem.top/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://blog.alterem.top/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>js生成一个不重复的ID的函数的进化之路</title>
    <link href="http://blog.alterem.top/2019/06/12/js%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84ID%E7%9A%84%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
    <id>http://blog.alterem.top/2019/06/12/js生成一个不重复的ID的函数的进化之路/</id>
    <published>2019-06-12T09:27:14.000Z</published>
    <updated>2019-06-12T15:43:26.383Z</updated>
    
    <content type="html"><![CDATA[<p>在MongoDB中的ObjectID，可以理解为是一个不会重复的ID，这里有个链接<a href="http://blog.csdn.net/xiamizy/article/details/41521025" target="_blank" rel="noopener">http://blog.csdn.net/xiamizy/article/details/41521025</a> 感兴趣可以去研究一下。 </p><h2 id="我今天要做的就是做一个不重复ID的生成器"><a href="#我今天要做的就是做一个不重复ID的生成器" class="headerlink" title="我今天要做的就是做一个不重复ID的生成器"></a>我今天要做的就是做一个不重复ID的生成器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>):<span class="title">String</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="先看看下面的几个方法"><a href="#先看看下面的几个方法" class="headerlink" title="先看看下面的几个方法"></a>先看看下面的几个方法</h2><h3 id="1-生成-0-1-的随机数的Math-random-例如"><a href="#1-生成-0-1-的随机数的Math-random-例如" class="headerlink" title="1.生成[0,1)的随机数的Math.random,例如"></a>1.生成[0,1)的随机数的Math.random,例如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我这次运行生成的是：0.5834165740043102</span></span><br><span class="line"><span class="built_in">Math</span>.random()</span><br></pre></td></tr></table></figure><h3 id="2-获取当前时间戳Date-now"><a href="#2-获取当前时间戳Date-now" class="headerlink" title="2.获取当前时间戳Date.now"></a>2.获取当前时间戳Date.now</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//现在时间戳是1482645606622</span></span><br><span class="line"><span class="built_in">Date</span>.now() = <span class="number">1521009303858</span></span><br></pre></td></tr></table></figure><h3 id="3-将10进制转换为其他进制的字符串-Number-toString"><a href="#3-将10进制转换为其他进制的字符串-Number-toString" class="headerlink" title="3.将10进制转换为其他进制的字符串 Number.toString"></a>3.将10进制转换为其他进制的字符串 Number.toString</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将1482645606622转换成二进制：10101100100110100100100001001000011011110</span></span><br><span class="line">(<span class="number">1482645606622</span>).toString(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//转换成16进制：159349090de MongDB中的ObjectID就是24位16进制数</span></span><br><span class="line">(<span class="number">1482645606622</span>).toString(<span class="number">16</span>)；</span><br><span class="line"><span class="comment">//最大进制支持转为36进制，使用字符是0-9a-z ：ix48wvry</span></span><br><span class="line">(<span class="number">1482645606622</span>).toString(<span class="number">36</span>)</span><br></pre></td></tr></table></figure><h2 id="GenNonDuplicateID的自我进化"><a href="#GenNonDuplicateID的自我进化" class="headerlink" title="GenNonDuplicateID的自我进化"></a>GenNonDuplicateID的自我进化</h2><h3 id="1-随机数版本-v0-0-1"><a href="#1-随机数版本-v0-0-1" class="headerlink" title="1.随机数版本 v0.0.1"></a>1.随机数版本 v0.0.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个类似 0.1283460319177394的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure><h3 id="2-随机数版本16进制版本-v0-0-2"><a href="#2-随机数版本16进制版本-v0-0-2" class="headerlink" title="2.随机数版本16进制版本 v0.0.2"></a>2.随机数版本16进制版本 v0.0.2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数将生成类似 0.c1615913fa915 的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure><h3 id="3-随机数版本36进制版本-v0-0-3"><a href="#3-随机数版本36进制版本-v0-0-3" class="headerlink" title="3.随机数版本36进制版本 v0.0.3"></a>3.随机数版本36进制版本 v0.0.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数将生成类似 0.hefy7uw6ddzwidkwcmxkzkt9 的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure><h3 id="4-随机数版本36进制版本-去掉”0-”-v0-0-4"><a href="#4-随机数版本36进制版本-去掉”0-”-v0-0-4" class="headerlink" title="4.随机数版本36进制版本 去掉”0.” v0.0.4"></a>4.随机数版本36进制版本 去掉”0.” v0.0.4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数将生成类似 8dlv9vabygks2cbg1spds4i 的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure><p><strong>然而用一个随机数作为ID，随着使用次数的累积，必然会出现相同的两个ID</strong> </p><h3 id="5-引入时间戳-的36微进制版本-v0-1-1"><a href="#5-引入时间戳-的36微进制版本-v0-1-1" class="headerlink" title="5.引入时间戳 的36微进制版本 v0.1.1"></a>5.引入时间戳 的36微进制版本 v0.1.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> idStr = <span class="built_in">Date</span>.now().toString(<span class="number">36</span>)</span><br><span class="line">  idStr += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>)</span><br><span class="line">  <span class="keyword">return</span> idStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数将生成类似 ix49sfsnt7514k5wpflyb5l2vtok9y66r 的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure><h3 id="6-引入时间戳-的36微进制版本-加入随机数长度控制-v0-1-2"><a href="#6-引入时间戳-的36微进制版本-加入随机数长度控制-v0-1-2" class="headerlink" title="6.引入时间戳 的36微进制版本 加入随机数长度控制 v0.1.2"></a>6.引入时间戳 的36微进制版本 加入随机数长度控制 v0.1.2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params">randomLength</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> idStr = <span class="built_in">Date</span>.now().toString(<span class="number">36</span>)</span><br><span class="line">  idStr += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>,randomLength)</span><br><span class="line">  <span class="keyword">return</span> idStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenNonDuplicateID(3) 将生成类似 ix49wl2978w 的ID</span></span><br><span class="line">GenNonDuplicateID(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这样生成的ID前面几位总是相同，看着不爽，于是再改改 </p><h3 id="7-引入时间戳-随机数前置-36进制-加入随机数长度控制-v0-1-3"><a href="#7-引入时间戳-随机数前置-36进制-加入随机数长度控制-v0-1-3" class="headerlink" title="7. 引入时间戳 随机数前置 36进制 加入随机数长度控制 v0.1.3"></a>7. 引入时间戳 随机数前置 36进制 加入随机数长度控制 v0.1.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成一个用不重复的ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GenNonDuplicateID</span>(<span class="params">randomLength</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="built_in">Math</span>.random().toString().substr(<span class="number">3</span>,randomLength) + <span class="built_in">Date</span>.now()).toString(<span class="number">36</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GenNonDuplicateID()将生成 rfmipbs8ag0kgkcogc 类似的ID</span></span><br><span class="line">GenNonDuplicateID()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MongoDB中的ObjectID，可以理解为是一个不会重复的ID，这里有个链接&lt;a href=&quot;http://blog.csdn.net/xiamizy/article/details/41521025&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/xiamizy/article/details/41521025&lt;/a&gt; 感兴趣可以去研究一下。 &lt;/p&gt;
&lt;h2 id=&quot;我今天要做的就是做一个不重复ID的生成器&quot;&gt;&lt;a href=&quot;#我今天要做的就是做一个不重复ID的生成器&quot; class=&quot;headerlink&quot; title=&quot;我今天要做的就是做一个不重复ID的生成器&quot;&gt;&lt;/a&gt;我今天要做的就是做一个不重复ID的生成器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 生成一个用不重复的ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GenNonDuplicateID&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;):&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://blog.alterem.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://blog.alterem.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>常见的安全算法</title>
    <link href="http://blog.alterem.top/2019/06/12/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.alterem.top/2019/06/12/常见的安全算法/</id>
    <published>2019-06-12T08:54:19.000Z</published>
    <updated>2019-06-12T08:58:59.647Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理了常见的安全算法，包括MD5、SHA、DES、AES、RSA等，并写了完整的工具类（Java 版），工具类包含测试。 </p><h2 id="一、数字摘要算法"><a href="#一、数字摘要算法" class="headerlink" title="一、数字摘要算法"></a>一、数字摘要算法</h2><blockquote><p>数字摘要也称为消息摘要，它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash函数对消息进行计算而产生。如果消息在传递的途中改变了，接收者通过对收到消息采用相同的Hash重新计算，新产生的摘要与原摘要进行比较，就可知道消息是否被篡改了，因此消息摘要能够验证消息的完整性。消息摘要采用单向Hash函数将需要计算的内容”摘要”成固定长度的串，这个串亦称为数字指纹。这个串有固定的长度，且不同的明文摘要成密文，其结果总是不同的(相对的)，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。     </p></blockquote><h3 id="1-Md5"><a href="#1-Md5" class="headerlink" title="1. Md5"></a>1. Md5</h3><p>MD5即Message Digest Algorithm 5(信息摘要算法5)，是数字摘要算法一种实现，用于确保信息传输完整性和一致性，摘要长度为128位。 MD5由MD4、 MD3、 MD2改进而来，主要增强算法复杂度和不可逆性，该算法因其普遍、稳定、快速的特点，在产业界得到了极为广泛的使用，目前主流的编程语言普遍都已有MD5算法实现。 </p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Message Digest Algorithm 5(信息摘要算法5)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs the MD5Util object and sets the string whose MD5Util is to be</span></span><br><span class="line"><span class="comment">     * computed.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inStr</span></span><br><span class="line"><span class="comment">     *    the &lt;code&gt;String&lt;/code&gt; whose MD5Util is to be computed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String COMMON_KEY=<span class="string">"zhongzhuoxin#@!321"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MD5Util</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">str2MD5</span><span class="params">(String inStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> hexDigits[] = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>,</span><br><span class="line">                <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span> &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] strTemp = inStr.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            MessageDigest mdTemp = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            mdTemp.update(strTemp);</span><br><span class="line">            <span class="keyword">byte</span>[] md = mdTemp.digest();</span><br><span class="line">            <span class="keyword">int</span> j = md.length;</span><br><span class="line">            <span class="keyword">char</span> str[] = <span class="keyword">new</span> <span class="keyword">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">byte</span> byte0 = md[i];</span><br><span class="line">                str[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                str[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--MD5Util</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> HEX_DIGITS[] = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>,</span><br><span class="line">            <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123; <span class="comment">// String to byte</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(b.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">            sb.append(HEX_DIGITS[(b[i] &amp; <span class="number">0xf0</span>) &gt;&gt;&gt; <span class="number">4</span>]);</span><br><span class="line">            sb.append(HEX_DIGITS[b[i] &amp; <span class="number">0x0f</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">AndroidMd5</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Create MD5Util Hash</span></span><br><span class="line">            MessageDigest digest = MessageDigest</span><br><span class="line">                    .getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            digest.update(s.getBytes());</span><br><span class="line">            <span class="keyword">byte</span> messageDigest[] = digest.digest();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> toHexString(messageDigest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String m = MD5Util.str2MD5(<span class="string">"swwwwwwwwwwdkinner"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.print(m.length() + <span class="string">"    "</span>);</span><br><span class="line">        System.out.println(m);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SHA"><a href="#2-SHA" class="headerlink" title="2.SHA"></a>2.SHA</h3><p>SHA的全称是Secure Hash Algorithm，即安全散列算法。 1993年，安全散列算法(SHA)由美国国家标准和技术协会（NIST)提出，并作为联邦信息处理标准(FIPS PUB 180)公布， 1995年又发布了一个修订版FIPS PUB 180-1，通常称之为SHA-1。 SHA-1是基于MD4算法的，现在已成为公认的最安全的散列算法之一，并被广泛使用。SHA-1算法生成的摘要信息的长度为160位，由于生成的摘要信息更长，运算的过程更加复杂，在相同的硬件上， SHA-1的运行速度比MD5更慢，但是也更为安全。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Strings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SHA的全称是Secure Hash Algorithm，即安全散列算法</span></span><br><span class="line"><span class="comment"> * Created by fangzhipeng on 2017/3/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHAUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY_SHA = <span class="string">"SHA"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String KEY_SHA1 = <span class="string">"SHA-1"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] hexDigits = &#123; <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>,</span><br><span class="line">            <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SHAUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SHA 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 需要加密的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密之后的字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptSHA(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建具有指定算法名称的信息摘要</span></span><br><span class="line"><span class="comment">//        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span></span><br><span class="line">        MessageDigest sha = MessageDigest.getInstance(KEY_SHA1);</span><br><span class="line">        <span class="comment">// 使用指定的字节数组对摘要进行最后更新</span></span><br><span class="line">        sha.update(data);</span><br><span class="line">        <span class="comment">// 完成摘要计算并返回</span></span><br><span class="line">        <span class="keyword">return</span> sha.digest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SHA 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 需要加密的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密之后的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptSHA</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 验证传入的字符串</span></span><br><span class="line">        <span class="keyword">if</span> (Strings.isNullOrEmpty(data)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建具有指定算法名称的信息摘要</span></span><br><span class="line">        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br><span class="line">        <span class="comment">// 使用指定的字节数组对摘要进行最后更新</span></span><br><span class="line">        sha.update(data.getBytes());</span><br><span class="line">        <span class="comment">// 完成摘要计算</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = sha.digest();</span><br><span class="line">        <span class="comment">// 将得到的字节数组变成字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> byteArrayToHexString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个字节转化成十六进制形式的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexString</span><span class="params">(<span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = b;</span><br><span class="line">        <span class="comment">//System.out.println("ret = " + ret);</span></span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ret += <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m = ret / <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> n = ret % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> hexDigits[m] + hexDigits[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换字节数组为十六进制字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes 字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 十六进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteArrayToHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            sb.append(byteToHexString(bytes[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String key = <span class="string">"123"</span>;</span><br><span class="line">        System.out.println(encryptSHA(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、对称加密"><a href="#二、对称加密" class="headerlink" title="二、对称加密"></a>二、对称加密</h2><blockquote><p>对称加密算法是应用较早的加密算法，技术成熟。在对称加密算法中，数据发送方将明文(原始数据)和加密密钥一起经过特殊加密算法处理后，生成复杂的加密密文进行发送，数据接收方收到密文后，若想读取原文，则需要使用加密使用的密钥及相同算法的逆算法对加密的密文进行解密，才能使其恢复成可读明文。在对称加密算法中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行加密和解密，这就要求加密和解密方事先都必须知道加密的密钥。     </p></blockquote><h3 id="1-DES算法"><a href="#1-DES算法" class="headerlink" title="1. DES算法"></a>1. DES算法</h3><p>1973 年，美国国家标准局(NBS)在认识到建立数据保护标准既明显又急迫的情况下，开始征集联邦数据加密标准的方案。 1975 年3月17日， NBS公布了IBM公司提供的密码算法，以标准建议的形式在全国范围内征求意见。经过两年多的公开讨论之后， 1977 年7月15日， NBS宣布接受这建议，作为联邦信息处理标准46 号数据加密标准(Data Encryptin Standard)，即DES正式颁布，供商业界和非国防性政府部门使用。DES算法属于对称加密算法，明文按64位进行分组，密钥长64位，但事实上只有56位参与DES<br>运算(第8、 16、 24、 32、 40、 48、 56、 64位是校验位，使得每个密钥都有奇数个1),分组后的明文和56位的密钥按位替代或交换的方法形成密文。由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解，因此演变出了3DES算法。 3DES是DES向AES过渡的加密算法，它使用3条56位的密钥对数据进行三次加密，是DES的一个更安全的变形 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKeyFactory;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.DESKeySpec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Data Encryptin Standard</span></span><br><span class="line"><span class="comment"> * 数据加密标准</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DES = <span class="string">"DES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description 根据键值进行加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密键byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String data, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bt = encrypt(data.getBytes(), key.getBytes());</span><br><span class="line">        String strs = <span class="keyword">new</span> BASE64Encoder().encode(bt);</span><br><span class="line">        <span class="keyword">return</span> strs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description 根据键值进行解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密键byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String data, String key)</span> <span class="keyword">throws</span> Exception,</span></span><br><span class="line"><span class="function">            Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        BASE64Decoder decoder = <span class="keyword">new</span> BASE64Decoder();</span><br><span class="line">        <span class="keyword">byte</span>[] buf = decoder.decodeBuffer(data);</span><br><span class="line">        <span class="keyword">byte</span>[] bt = decrypt(buf, key.getBytes());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description 根据键值进行加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密键byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 生成一个可信任的随机数源</span></span><br><span class="line">        SecureRandom sr = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从原始密钥数据创建DESKeySpec对象</span></span><br><span class="line">        DESKeySpec dks = <span class="keyword">new</span> DESKeySpec(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象</span></span><br><span class="line">        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);</span><br><span class="line">        SecretKey securekey = keyFactory.generateSecret(dks);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cipher对象实际完成加密操作</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(DES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用密钥初始化Cipher对象</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description 根据键值进行解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密键byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 生成一个可信任的随机数源</span></span><br><span class="line">        SecureRandom sr = <span class="keyword">new</span> SecureRandom();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从原始密钥数据创建DESKeySpec对象</span></span><br><span class="line">        DESKeySpec dks = <span class="keyword">new</span> DESKeySpec(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象</span></span><br><span class="line">        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);</span><br><span class="line">        SecretKey securekey = keyFactory.generateSecret(dks);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Cipher对象实际完成解密操作</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(DES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用密钥初始化Cipher对象</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, securekey, sr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       String  sStr=encrypt(<span class="string">"122222112222:12343232323:jajwwwwslwskwkkwksk"</span>,<span class="string">"wew2323w233321ws233w"</span>);</span><br><span class="line">       System.out.println(sStr);</span><br><span class="line">       String mStr=decrypt(sStr,<span class="string">"wew2323w233321ws233w"</span>);</span><br><span class="line">       System.out.println(mStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-AES"><a href="#2-AES" class="headerlink" title="2. AES"></a>2. AES</h3><p>AES的全称是Advanced Encryption Standard，即高级加密标准，该算法由比利时密码学家Joan Daemen和Vincent Rijmen所设计，结合两位作者的名字，又称Rijndael加密算法，是美国联邦政府采用的一种对称加密标准，这个标准用来替代原先的DES算法，已经广为全世界所使用，已然成为对称加密算法中最流行的算法之一。AES算法作为新一代的数据加密标准汇聚了强安全性、高性能、高效率、易用和灵活等优<br>点，设计有三个密钥长度:128,192,256位，比DES算法的加密强度更高，更为安全。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fangzhipeng on 2017/3/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">byte</span>[]  key = <span class="string">"w@#$4@#$s^&amp;3*&amp;^4"</span>.getBytes();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String algorithm=<span class="string">"AES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] dataToSend = data.getBytes();</span><br><span class="line">        Cipher c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Cipher.getInstance(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SecretKeySpec k =  <span class="keyword">new</span> SecretKeySpec(key, algorithm);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.init(Cipher.ENCRYPT_MODE, k);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] encryptedData = <span class="string">""</span>.getBytes();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            encryptedData = c.doFinal(dataToSend);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] encryptedByteValue =     Base64.getEncoder().encode(encryptedData);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> String(encryptedByteValue);<span class="comment">//.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] encryptedData  =  Base64.getDecoder().decode(data);</span><br><span class="line">        Cipher c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c = Cipher.getInstance(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        SecretKeySpec k =</span><br><span class="line">                <span class="keyword">new</span> SecretKeySpec(key, algorithm);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.init(Cipher.DECRYPT_MODE, k);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e1) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] decrypted = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            decrypted = c.doFinal(encryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decrypted);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String password=encrypt(<span class="string">"12233440988:1239874389888:dd333"</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(decrypt(password));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、非对称加密"><a href="#三、非对称加密" class="headerlink" title="三、非对称加密"></a>三、非对称加密</h2><blockquote><p>非对称加密算法又称为公开密钥加密算法，它需要两个密钥，一个称为公开密钥(public key)，即公钥，另一个称为私有密钥(private key)，即私钥。公钥与私钥需要配对使用，如果用公钥对数据进行加密，只有用对应的私钥才能进行解密，而如果使用私钥对数据进行加密，那么只有用对应的公钥才能进行解密。因为加密和解密使用的是两个不同的密钥，所以这种算法称为非对称加密算法。非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公钥向其它人公开，得到该公钥的乙方使用该密钥对机密信息进行加密后再发送给甲方，甲方再使用自己保存的另一把专用密钥，即私钥，对加密后的信息进行解密。     </p></blockquote><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA非对称加密算法是1977年由Ron Rivest、 Adi Shamirh和LenAdleman开发的， RSA取名来自开发他们三者的名字。 RSA是目前最有影响力的非对称加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。 RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但反过来想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by fangzhipeng on 2017/3/21.</span></span><br><span class="line"><span class="comment"> * RSA ：RSA非对称加密算法是1977年由Ron Rivest、 Adi Shamirh和LenAdleman开发   *  的， RSA取名来</span></span><br><span class="line"><span class="comment"> *  自开发他们三者的名字。</span></span><br><span class="line"><span class="comment"> * 参考：http://blog.csdn.net/wangqiuyun/article/details/42143957</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数据转字符串专用集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_CHAR = &#123; <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>,</span><br><span class="line">            <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成密钥对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genKeyPair</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象</span></span><br><span class="line">        KeyPairGenerator keyPairGen = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化密钥对生成器，密钥大小为96-1024位</span></span><br><span class="line">        keyPairGen.initialize(<span class="number">1024</span>,<span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="comment">// 生成一个密钥对，保存在keyPair中</span></span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line">        <span class="comment">// 得到私钥</span></span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="comment">// 得到公钥</span></span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到公钥字符串</span></span><br><span class="line">            <span class="comment">// 得到私钥字符串</span></span><br><span class="line">            String privateKeyString =<span class="keyword">new</span> String( Base64.getEncoder().encode(privateKey.getEncoded()));</span><br><span class="line">            String publicKeyString =<span class="keyword">new</span> String( Base64.getEncoder().encode(publicKey.getEncoded()));</span><br><span class="line">            <span class="comment">// 将密钥对写入到文件</span></span><br><span class="line"></span><br><span class="line">            File file1=<span class="keyword">new</span> File(filePath + <span class="string">"publicKey.keystore"</span>);</span><br><span class="line">            File file2=<span class="keyword">new</span> File(filePath + <span class="string">"privateKey.keystore"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!file1.exists()) &#123;</span><br><span class="line">                file1.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!file2.exists()) &#123;</span><br><span class="line">                file2.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            FileWriter pubfw = <span class="keyword">new</span> FileWriter(filePath + <span class="string">"/publicKey.keystore"</span>);</span><br><span class="line">            FileWriter prifw = <span class="keyword">new</span> FileWriter(filePath + <span class="string">"/privateKey.keystore"</span>);</span><br><span class="line">            BufferedWriter pubbw = <span class="keyword">new</span> BufferedWriter(pubfw);</span><br><span class="line">            BufferedWriter pribw = <span class="keyword">new</span> BufferedWriter(prifw);</span><br><span class="line">            pubbw.write(publicKeyString);</span><br><span class="line">            pribw.write(privateKeyString);</span><br><span class="line">            pubbw.flush();</span><br><span class="line">            pubbw.close();</span><br><span class="line">            pubfw.close();</span><br><span class="line">            pribw.flush();</span><br><span class="line">            pribw.close();</span><br><span class="line">            prifw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中输入流中加载公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             加载公钥时产生的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">loadPublicKeyByFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path</span><br><span class="line">                    + <span class="string">"/publicKey.keystore"</span>));</span><br><span class="line">            String readLine = <span class="keyword">null</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> ((readLine = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(readLine);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥数据流读取错误"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥输入流为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符串中加载公钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKeyStr</span></span><br><span class="line"><span class="comment">     *            公钥数据字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             加载公钥时产生的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title">loadPublicKeyByStr</span><span class="params">(String publicKeyStr)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = Base64.getDecoder().decode(publicKeyStr);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(buffer);</span><br><span class="line">            <span class="keyword">return</span> (RSAPublicKey) keyFactory.generatePublic(keySpec);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥数据为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从文件中加载私钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">loadPrivateKeyByFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path</span><br><span class="line">                    + <span class="string">"/privateKey.keystore"</span>));</span><br><span class="line">            String readLine = <span class="keyword">null</span>;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">while</span> ((readLine = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(readLine);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥数据读取错误"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥输入流为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title">loadPrivateKeyByStr</span><span class="params">(String privateKeyStr)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = Base64.getDecoder().decode(privateKeyStr);</span><br><span class="line">            PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(buffer);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">return</span> (RSAPrivateKey) keyFactory.generatePrivate(keySpec);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥数据为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密过程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">     *            公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainTextData</span></span><br><span class="line"><span class="comment">     *            明文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             加密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(RSAPublicKey publicKey, <span class="keyword">byte</span>[] plainTextData)</span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密公钥为空, 请设置"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用默认RSA</span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plainTextData);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此加密算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密公钥非法,请检查"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文长度非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文数据已损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密过程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey</span></span><br><span class="line"><span class="comment">     *            私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainTextData</span></span><br><span class="line"><span class="comment">     *            明文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             加密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(RSAPrivateKey privateKey, <span class="keyword">byte</span>[] plainTextData)</span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密私钥为空, 请设置"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用默认RSA</span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plainTextData);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此加密算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密私钥非法,请检查"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文长度非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文数据已损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密过程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey</span></span><br><span class="line"><span class="comment">     *            私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherData</span></span><br><span class="line"><span class="comment">     *            密文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             解密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(RSAPrivateKey privateKey, <span class="keyword">byte</span>[] cipherData)</span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密私钥为空, 请设置"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用默认RSA</span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(cipherData);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此解密算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密私钥非法,请检查"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文长度非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文数据已损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解密过程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey</span></span><br><span class="line"><span class="comment">     *            公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherData</span></span><br><span class="line"><span class="comment">     *            密文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     *             解密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(RSAPublicKey publicKey, <span class="keyword">byte</span>[] cipherData)</span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密公钥为空, 请设置"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用默认RSA</span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="comment">// cipher= Cipher.getInstance("RSA", new BouncyCastleProvider());</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(cipherData);</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此解密算法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密公钥非法,请检查"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文长度非法"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文数据已损坏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 字节数据转十六进制字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     *            输入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 十六进制内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">byteArrayToString</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 取出字节的高四位 作为索引得到相应的十六进制标识符 注意无符号右移</span></span><br><span class="line">            stringBuilder.append(HEX_CHAR[(data[i] &amp; <span class="number">0xf0</span>) &gt;&gt;&gt; <span class="number">4</span>]);</span><br><span class="line">            <span class="comment">// 取出字节的低四位 作为索引得到相应的十六进制标识符</span></span><br><span class="line">            stringBuilder.append(HEX_CHAR[(data[i] &amp; <span class="number">0x0f</span>)]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; data.length - <span class="number">1</span>) &#123;</span><br><span class="line">                stringBuilder.append(<span class="string">' '</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String filepath=<span class="string">"F:/temp/"</span>;</span><br><span class="line">        File file=<span class="keyword">new</span> File(filepath);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        genKeyPair(filepath);</span><br><span class="line">        System.out.println(<span class="string">"--------------公钥加密私钥解密过程-------------------"</span>);</span><br><span class="line">        String plainText=<span class="string">"1223333323:8783737321232:dewejj28i33e92hhsxxxx"</span>;</span><br><span class="line">        <span class="comment">//公钥加密过程</span></span><br><span class="line">        <span class="keyword">byte</span>[] cipherData=encrypt(loadPublicKeyByStr(loadPublicKeyByFile(filepath)),plainText.getBytes());</span><br><span class="line">        String cipher=<span class="keyword">new</span> String(Base64.getEncoder().encode(cipherData));</span><br><span class="line">        <span class="comment">//私钥解密过程</span></span><br><span class="line">        <span class="keyword">byte</span>[] res=decrypt(loadPrivateKeyByStr(loadPrivateKeyByFile(filepath)), Base64.getDecoder().decode(cipher));</span><br><span class="line">        String restr=<span class="keyword">new</span> String(res);</span><br><span class="line">        System.out.println(<span class="string">"原文："</span>+plainText);</span><br><span class="line">        System.out.println(<span class="string">"加密密文："</span>+cipher);</span><br><span class="line">        System.out.println(<span class="string">"解密："</span>+restr);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理了常见的安全算法，包括MD5、SHA、DES、AES、RSA等，并写了完整的工具类（Java 版），工具类包含测试。 &lt;/p&gt;
&lt;h2 id=&quot;一、数字摘要算法&quot;&gt;&lt;a href=&quot;#一、数字摘要算法&quot; class=&quot;headerlink&quot; title=&quot;一、数字摘要算法&quot;&gt;&lt;/a&gt;一、数字摘要算法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数字摘要也称为消息摘要，它是一个唯一对应一个消息或文本的固定长度的值，它由一个单向Hash函数对消息进行计算而产生。如果消息在传递的途中改变了，接收者通过对收到消息采用相同的Hash重新计算，新产生的摘要与原摘要进行比较，就可知道消息是否被篡改了，因此消息摘要能够验证消息的完整性。消息摘要采用单向Hash函数将需要计算的内容”摘要”成固定长度的串，这个串亦称为数字指纹。这个串有固定的长度，且不同的明文摘要成密文，其结果总是不同的(相对的)，而同样的明文其摘要必定一致。这样这串摘要便可成为验证明文是否是”真身”的”指纹”了。     &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-Md5&quot;&gt;&lt;a href=&quot;#1-Md5&quot; class=&quot;headerlink&quot; title=&quot;1. Md5&quot;&gt;&lt;/a&gt;1. Md5&lt;/h3&gt;&lt;p&gt;MD5即Message Digest Algorithm 5(信息摘要算法5)，是数字摘要算法一种实现，用于确保信息传输完整性和一致性，摘要长度为128位。 MD5由MD4、 MD3、 MD2改进而来，主要增强算法复杂度和不可逆性，该算法因其普遍、稳定、快速的特点，在产业界得到了极为广泛的使用，目前主流的编程语言普遍都已有MD5算法实现。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alterem.top/categories/Java/"/>
    
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ID生成器-Twitter的雪花算法</title>
    <link href="http://blog.alterem.top/2019/06/12/ID%E7%94%9F%E6%88%90%E5%99%A8-Twitter%E7%9A%84%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.alterem.top/2019/06/12/ID生成器-Twitter的雪花算法/</id>
    <published>2019-06-12T05:38:55.000Z</published>
    <updated>2019-07-04T12:10:01.499Z</updated>
    
    <content type="html"><![CDATA[<p>上代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1489111610226L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDataCenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; dataCenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> dataCenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + dataCenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> dataCenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataCenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> dataCenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"workerId can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dataCenterId &gt; maxDataCenterId || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"dataCenterId can't be greater than %d or less than 0"</span>, maxDataCenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (dataCenterId &lt;&lt; dataCenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        SnowflakeIdWorker idWorker = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println((System.nanoTime()-startTime)/<span class="number">1000000</span>+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://blog.alterem.top/categories/Java/"/>
    
      <category term="Id" scheme="http://blog.alterem.top/categories/Java/Id/"/>
    
    
      <category term="Java" scheme="http://blog.alterem.top/tags/Java/"/>
    
      <category term="Id" scheme="http://blog.alterem.top/tags/Id/"/>
    
  </entry>
  
</feed>
